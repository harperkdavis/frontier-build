{"mappings":"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","sources":["<anon>","src/module.ts","src/lib.ts","src/items.json","src/recipes.json","src/sim.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\nvar $53f3621204de4d76$exports = {};\n\n$parcel$export($53f3621204de4d76$exports, \"Item\", () => $53f3621204de4d76$export$6d08773d2e66f8f2);\n$parcel$export($53f3621204de4d76$exports, \"REGISTRY\", () => $53f3621204de4d76$export$21cc2ed387caee94);\n$parcel$export($53f3621204de4d76$exports, \"ItemState\", () => $53f3621204de4d76$export$7f9b7f9a9512098);\n$parcel$export($53f3621204de4d76$exports, \"ItemConditionTypes\", () => $53f3621204de4d76$export$1f4e9867ac5b0621);\n$parcel$export($53f3621204de4d76$exports, \"ItemCondition\", () => $53f3621204de4d76$export$8c94884628249f27);\n$parcel$export($53f3621204de4d76$exports, \"ItemConditions\", () => $53f3621204de4d76$export$1015978009c33b96);\n$parcel$export($53f3621204de4d76$exports, \"Recipe\", () => $53f3621204de4d76$export$e61e05c18d2ee555);\n$parcel$export($53f3621204de4d76$exports, \"refreshRegistry\", () => $53f3621204de4d76$export$863af0becc8cdadb);\nvar $b5a86eb4d6ca5977$exports = {};\n$b5a86eb4d6ca5977$exports = JSON.parse('[{\"properties\":{},\"name\":\"Water\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":247,\"color\":41}]},{\"properties\":{},\"name\":\"Ice\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":178,\"color\":43}]},{\"properties\":{},\"name\":\"Red Cedar Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":5,\"color\":26}]},{\"properties\":{\"weight\":10},\"name\":\"Douglas Fir Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":6,\"color\":37}]},{\"properties\":{\"weight\":10},\"name\":\"Mountain Maple Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":5,\"color\":35}]},{\"properties\":{},\"name\":\"Western Juniper Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":20,\"color\":29}]},{\"properties\":{},\"name\":\"Large Boulder\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":30,\"color\":5}]},{\"properties\":{},\"name\":\"Willow Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":158,\"color\":34}]},{\"properties\":{\"weight\":5},\"name\":\"Flint Deposit\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":111,\"color\":9}]},{\"properties\":{\"weight\":20},\"name\":\"Fertile Soil\",\"tags\":[\"natural\",\"static\"],\"display\":[{\"character\":30,\"color\":20}]},{\"properties\":{\"weight\":10},\"name\":\"Clay Deposit\",\"tags\":[\"natural\",\"static\"],\"display\":[{\"character\":30,\"color\":27}]},{\"properties\":{},\"name\":\"Snow Bank\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":30,\"color\":8}]},{\"properties\":{\"weight\":10},\"name\":\"Stone\",\"tags\":[\"natural\"],\"display\":[{\"character\":7,\"color\":5}]},{\"properties\":{},\"name\":\"Flint Deposit with Chip\",\"tags\":[\"static\"],\"display\":[{\"character\":149,\"color\":9}]},{\"properties\":{\"damage\":1},\"name\":\"Flint Chip\",\"tags\":[\"weapon\",\"tool\",\"knifelike\",\"important\"],\"display\":[{\"character\":47,\"color\":9}]},{\"properties\":{},\"name\":\"Large Branch\",\"tags\":[],\"display\":[{\"character\":244,\"color\":20}]},{\"properties\":{},\"name\":\"Shaft\",\"tags\":[],\"display\":[{\"character\":179,\"color\":20}]},{\"properties\":{},\"name\":\"Stick\",\"tags\":[],\"display\":[{\"character\":45,\"color\":20}]},{\"properties\":{\"weight\":50},\"name\":\"Ryegrass\",\"tags\":[\"natural\",\"static\"],\"display\":[{\"character\":35,\"color\":32}]},{\"properties\":{\"weight\":20},\"name\":\"Cat Tail\",\"tags\":[\"natural\",\"foodSource\",\"static\"],\"display\":[{\"character\":244,\"color\":34}]},{\"properties\":{},\"name\":\"Cat Tail Stalk\",\"tags\":[],\"display\":[{\"character\":47,\"color\":34}]},{\"properties\":{\"food\":10},\"name\":\"Cat Tail Head\",\"tags\":[\"edible\"],\"display\":[{\"character\":45,\"color\":27}]},{\"properties\":{},\"name\":\"Cordage Rope\",\"tags\":[],\"display\":[{\"character\":21,\"color\":24}]},{\"properties\":{},\"name\":\"Cordage Thread\",\"tags\":[],\"display\":[{\"character\":21,\"color\":22}]},{\"properties\":{},\"name\":\"Tied Stick\",\"tags\":[],\"display\":[{\"character\":45,\"color\":20},{\"character\":21,\"color\":24}]},{\"properties\":{\"weight\":5},\"name\":\"Flat Rock\",\"tags\":[\"natural\"],\"display\":[{\"character\":95,\"color\":7}]},{\"properties\":{\"weight\":5},\"name\":\"Full Blackberry Bush\",\"tags\":[\"natural\",\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49}]},{\"properties\":{\"food\":5},\"name\":\"Blackberry\",\"tags\":[\"edible\"],\"display\":[{\"character\":249,\"color\":49}]},{\"properties\":{},\"name\":\"Blackberry Bush with 5 Berries\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":53,\"color\":49}]},{\"properties\":{},\"name\":\"Blackberry Bush with 4 Berries\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":52,\"color\":49}]},{\"properties\":{},\"name\":\"Blackberry Bush with 3 Berries\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":51,\"color\":49}]},{\"properties\":{},\"name\":\"Blackberry Bush with 2 Berries\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":50,\"color\":49}]},{\"properties\":{},\"name\":\"Blackberry Bush with 1 Berry\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":49,\"color\":49}]},{\"properties\":{},\"name\":\"Empty Blackberry Bush\",\"tags\":[\"static\"],\"display\":[{\"character\":42,\"color\":53}]},{\"properties\":{\"damage\":3},\"name\":\"Flint Hatchet\",\"tags\":[\"weapon\",\"tool\",\"hatchetlike\",\"important\"],\"display\":[{\"character\":173,\"color\":9}]},{\"properties\":{\"weight\":10},\"name\":\"Stinging Nettle\",\"tags\":[\"natural\"],\"display\":[{\"character\":235,\"color\":34}]},{\"properties\":{},\"name\":\"Blackberry Seed\",\"tags\":[\"seed\"],\"display\":[{\"character\":249,\"color\":53}]},{\"properties\":{},\"name\":\"Fertile Plot\",\"tags\":[\"static\"],\"display\":[{\"character\":240,\"color\":20}]},{\"properties\":{},\"name\":\"Seeded Blackberry Bush\",\"tags\":[\"static\"],\"display\":[{\"character\":240,\"color\":20},{\"character\":249,\"color\":53}]},{\"properties\":{},\"name\":\"Watered Blackberry Bush\",\"tags\":[\"static\"],\"display\":[{\"character\":240,\"color\":20},{\"character\":236,\"color\":55}]},{\"properties\":{\"food\":10},\"name\":\"Wild Potato\",\"tags\":[\"edible\",\"natural\"],\"display\":[{\"character\":7,\"color\":21}]},{\"properties\":{\"food\":10},\"name\":\"Wild Carrot\",\"tags\":[\"edible\",\"natural\"],\"display\":[{\"character\":25,\"color\":29}]},{\"properties\":{\"food\":10},\"name\":\"Wild Onion\",\"tags\":[\"edible\",\"natural\"],\"display\":[{\"character\":162,\"color\":33}]},{\"properties\":{},\"name\":\"Fertile Soil Clump\",\"tags\":[],\"display\":[{\"character\":7,\"color\":20}]},{\"properties\":{},\"name\":\"Clay Ball\",\"tags\":[],\"display\":[{\"character\":7,\"color\":27}]},{\"properties\":{\"food\":15},\"name\":\"Chanterelle\",\"tags\":[\"edible\",\"natural\"],\"display\":[{\"character\":24,\"color\":32}]},{\"properties\":{\"weight\":5},\"name\":\"Full Rose Hip Bush\",\"tags\":[\"foodSource\",\"static\",\"natural\"],\"display\":[{\"character\":128,\"color\":60}]},{\"properties\":{\"food\":5},\"name\":\"Rose Hip\",\"tags\":[\"edible\"],\"display\":[{\"character\":46,\"color\":60}]},{\"properties\":{},\"name\":\"Rose Hip Bush with 2 Hips\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":128,\"color\":60},{\"character\":50,\"color\":60}]},{\"properties\":{},\"name\":\"Rose Hip Bush with 1 Hip\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":128,\"color\":60},{\"character\":49,\"color\":60}]},{\"properties\":{},\"name\":\"Empty Rose Hip Bush\",\"tags\":[],\"display\":[{\"character\":128,\"color\":62}]},{\"properties\":{},\"name\":\"Kindling\",\"tags\":[],\"display\":[{\"character\":37,\"color\":20}]},{\"properties\":{},\"name\":\"Curved Branch\",\"tags\":[],\"display\":[{\"character\":40,\"color\":20}]},{\"properties\":{},\"name\":\"Split Shaft\",\"tags\":[],\"display\":[{\"character\":179,\"color\":21}]},{\"properties\":{},\"name\":\"Split Shaft with Notch\",\"tags\":[],\"display\":[{\"character\":124,\"color\":21}]},{\"properties\":{},\"name\":\"Fire Starting Kit\",\"tags\":[\"important\"],\"display\":[{\"character\":29,\"color\":21}]},{\"properties\":{\"heat\":20},\"name\":\"Fire\",\"tags\":[\"static\",\"heatSource\",\"important\"],\"display\":[{\"character\":127,\"color\":0},{\"character\":127,\"color\":28},{\"character\":127,\"color\":0},{\"character\":127,\"color\":31}]},{\"properties\":{\"heat\":12},\"name\":\"Fire Embers\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":15,\"color\":0},{\"character\":15,\"color\":0},{\"character\":15,\"color\":28},{\"character\":15,\"color\":28}]},{\"properties\":{\"heat\":4},\"name\":\"Ignited Kit\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":42,\"color\":0},{\"character\":42,\"color\":28}]},{\"properties\":{},\"name\":\"Charcoal\",\"tags\":[\"static\"],\"display\":[{\"character\":236,\"color\":5}]},{\"properties\":{},\"name\":\"Bow\",\"tags\":[\"tool\",\"important\"],\"display\":[{\"character\":123,\"color\":20}]},{\"properties\":{},\"name\":\"Bow Drill\",\"tags\":[\"important\"],\"display\":[{\"character\":123,\"color\":20},{\"character\":45,\"color\":20}]},{\"properties\":{},\"name\":\"Curved Shaft\",\"tags\":[],\"display\":[{\"character\":60,\"color\":20}]},{\"properties\":{\"food\":10},\"name\":\"Tinder\",\"tags\":[],\"display\":[{\"character\":42,\"color\":27}]},{\"properties\":{},\"name\":\"Red Cedar Tree with Tinder\",\"tags\":[\"static\"],\"display\":[{\"character\":5,\"color\":26},{\"character\":42,\"color\":27}]},{\"properties\":{},\"name\":\"Clay Deposit with 3 Balls\",\"tags\":[\"static\"],\"display\":[{\"character\":30,\"color\":27},{\"character\":51,\"color\":27}]},{\"properties\":{},\"name\":\"Clay Deposit with 2 Balls\",\"tags\":[\"static\"],\"display\":[{\"character\":30,\"color\":27},{\"character\":50,\"color\":27}]},{\"properties\":{},\"name\":\"Clay Deposit with 1 Ball\",\"tags\":[\"static\"],\"display\":[{\"character\":30,\"color\":27},{\"character\":49,\"color\":27}]},{\"properties\":{},\"name\":\"Rye Grain\",\"tags\":[],\"display\":[{\"character\":37,\"color\":32}]},{\"properties\":{},\"name\":\"Straw\",\"tags\":[],\"display\":[{\"character\":186,\"color\":32}]},{\"properties\":{\"size\":3},\"name\":\"Straw Basket\",\"tags\":[\"container\",\"important\"],\"display\":[{\"character\":118,\"color\":32}]},{\"properties\":{},\"name\":\"Wet Clay Bowl\",\"tags\":[],\"display\":[{\"character\":118,\"color\":27}]},{\"properties\":{},\"name\":\"Clay Bowl\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22}]},{\"properties\":{},\"name\":\"Clay Bowl with Water\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":41}]},{\"properties\":{},\"name\":\"Harvested Mountain Maple Tree\",\"tags\":[\"static\"],\"display\":[{\"character\":5,\"color\":35},{\"character\":0,\"color\":1}]},{\"properties\":{},\"name\":\"Harvested Douglas Fir Tree\",\"tags\":[\"static\"],\"display\":[{\"character\":6,\"color\":37},{\"character\":0,\"color\":1}]},{\"properties\":{\"food\":15},\"name\":\"Roasted Potato\",\"tags\":[\"edible\"],\"display\":[{\"character\":7,\"color\":17}]},{\"properties\":{\"food\":15},\"name\":\"Roasted Carrot\",\"tags\":[\"edible\"],\"display\":[{\"character\":25,\"color\":17}]},{\"properties\":{\"food\":15},\"name\":\"Roasted Onion\",\"tags\":[\"edible\"],\"display\":[{\"character\":162,\"color\":17}]},{\"properties\":{\"food\":10},\"name\":\"Roasted Stinging Nettle\",\"tags\":[\"edible\"],\"display\":[{\"character\":235,\"color\":17}]},{\"properties\":{},\"name\":\"Bowl of Uncooked Rose Hip Tea\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":63}]},{\"properties\":{\"food\":15,\"heal\":20,\"cure\":1,\"leftovers\":73},\"name\":\"Full Bowl of Rose Hip Tea\",\"tags\":[\"edible\",\"healing\"],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":0}]},{\"properties\":{},\"name\":\"Bowl with Rye Dough\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":9,\"color\":32}]},{\"properties\":{},\"name\":\"Bowl of Uncooked Stinging Nettle Tea\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":37}]},{\"properties\":{\"food\":25,\"heal\":10,\"cure\":1,\"leftovers\":73},\"name\":\"Bowl of Stinging Nettle Tea\",\"tags\":[\"edible\",\"healing\"],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":34}]},{\"properties\":{},\"name\":\"Grave\",\"tags\":[\"static\"],\"display\":[{\"character\":157,\"color\":7}]},{\"properties\":{},\"name\":\"Harvested Willow Tree\",\"tags\":[\"static\"],\"display\":[{\"character\":158,\"color\":34},{\"character\":0,\"color\":1}]},{\"properties\":{\"food\":5,\"heal\":5},\"name\":\"Willow Bark\",\"tags\":[\"edible\",\"healing\"],\"display\":[{\"character\":126,\"color\":34}]},{\"properties\":{},\"name\":\"Rye Flour\",\"tags\":[],\"display\":[{\"character\":174,\"color\":32}]},{\"properties\":{},\"name\":\"Adobe\",\"tags\":[],\"display\":[{\"character\":81,\"color\":25}]},{\"properties\":{},\"name\":\"Adobe Oven\",\"tags\":[\"important\",\"static\"],\"display\":[{\"character\":117,\"color\":25}]},{\"properties\":{},\"name\":\"Adobe Forge\",\"tags\":[\"important\",\"static\"],\"display\":[{\"character\":234,\"color\":25}]},{\"properties\":{},\"name\":\"Rye Dough\",\"tags\":[],\"display\":[{\"character\":9,\"color\":32}]},{\"properties\":{},\"name\":\"Rye Dough on Flat Rock\",\"tags\":[],\"display\":[{\"character\":95,\"color\":7},{\"character\":9,\"color\":32}]},{\"properties\":{},\"name\":\"Rye Bread on Flat Rock\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":233,\"color\":32}]},{\"properties\":{\"food\":30},\"name\":\"Rye Bread\",\"tags\":[\"edible\",\"delicious\"],\"display\":[{\"character\":233,\"color\":32}]},{\"properties\":{},\"name\":\"Iron Vein\",\"tags\":[\"natural\",\"static\"],\"display\":[{\"character\":94,\"color\":28}]},{\"properties\":{\"weight\":10},\"name\":\"Raw Iron Ore\",\"tags\":[\"natural\"],\"display\":[{\"character\":22,\"color\":28}]},{\"properties\":{},\"name\":\"Wet Clay Plate\",\"tags\":[],\"display\":[{\"character\":95,\"color\":27}]},{\"properties\":{},\"name\":\"Clay Plate\",\"tags\":[],\"display\":[{\"character\":95,\"color\":22}]},{\"properties\":{\"heat\":8},\"name\":\"Lit Torch\",\"tags\":[\"heatSource\"],\"display\":[{\"character\":26,\"color\":0},{\"character\":26,\"color\":31}]},{\"properties\":{},\"name\":\"Charcoal Piece\",\"tags\":[],\"display\":[{\"character\":96,\"color\":5}]},{\"properties\":{\"heat\":12},\"name\":\"Lit Oven\",\"tags\":[\"heatSource\",\"static\"],\"display\":[{\"character\":117,\"color\":0},{\"character\":117,\"color\":31}]},{\"properties\":{\"heat\":16},\"name\":\"Lit Forge\",\"tags\":[\"heatSource\",\"static\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":234,\"color\":31}]},{\"properties\":{},\"name\":\"Bowl with Iron Ore\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":22,\"color\":28}]},{\"properties\":{},\"name\":\"Bowl with Charcoal\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":96,\"color\":5}]},{\"properties\":{},\"name\":\"Bowl with Steel Prerequisites\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":22,\"color\":28},{\"character\":96,\"color\":5}]},{\"properties\":{\"heat\":16},\"name\":\"Forge with Warming Iron Ore\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":22,\"color\":28},{\"character\":234,\"color\":31},{\"character\":22,\"color\":28}]},{\"properties\":{\"heat\":16},\"name\":\"Forge with Hot Iron Ore\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":22,\"color\":31},{\"character\":234,\"color\":31},{\"character\":22,\"color\":0}]},{\"properties\":{},\"name\":\"Wooden Tongs\",\"tags\":[],\"display\":[{\"character\":120,\"color\":20}]},{\"properties\":{},\"name\":\"Wooden Tongs with Hot Iron\",\"tags\":[],\"display\":[{\"character\":120,\"color\":20},{\"character\":22,\"color\":0},{\"character\":120,\"color\":20},{\"character\":22,\"color\":31}]},{\"properties\":{},\"name\":\"Flat Rock with Hot Iron\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":22,\"color\":0},{\"character\":95,\"color\":7},{\"character\":22,\"color\":31}]},{\"properties\":{},\"name\":\"Flat Rock with Hot Iron Ingot\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":169,\"color\":0}]},{\"properties\":{},\"name\":\"Flat Rock with Iron Ore\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":22,\"color\":28}]},{\"properties\":{},\"name\":\"Flat Rock with Iron Ingot\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":169,\"color\":28}]},{\"properties\":{},\"name\":\"Iron Ingot\",\"tags\":[\"resource\",\"important\"],\"display\":[{\"character\":169,\"color\":28}]},{\"properties\":{},\"name\":\"Smithing Hammer\",\"tags\":[\"tool\",\"important\"],\"display\":[{\"character\":231,\"color\":28}]},{\"properties\":{},\"name\":\"Unforged Steel Crucible\",\"tags\":[],\"display\":[{\"character\":110,\"color\":22},{\"character\":22,\"color\":28},{\"character\":96,\"color\":5}]},{\"properties\":{\"heat\":16},\"name\":\"Forge with Warming Steel Crucible\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":110,\"color\":28},{\"character\":234,\"color\":31},{\"character\":110,\"color\":28}]},{\"properties\":{\"heat\":16},\"name\":\"Forge with Hot Steel Crucible\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":110,\"color\":31},{\"character\":234,\"color\":31},{\"character\":110,\"color\":0}]},{\"properties\":{},\"name\":\"Wooden Tongs with Hot Steel Crucible\",\"tags\":[],\"display\":[{\"character\":120,\"color\":20},{\"character\":110,\"color\":0},{\"character\":120,\"color\":20},{\"character\":110,\"color\":31}]},{\"properties\":{},\"name\":\"Flat Rock with Hot Steel Crucible\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":110,\"color\":0}]},{\"properties\":{},\"name\":\"Flat Rock with Steel Crucible\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":110,\"color\":22}]},{\"properties\":{},\"name\":\"Forged Steel Crucible\",\"tags\":[\"static\"],\"display\":[{\"character\":110,\"color\":22}]},{\"properties\":{},\"name\":\"Bowl with Steel Ingot\",\"tags\":[\"static\"],\"display\":[{\"character\":118,\"color\":22},{\"character\":254,\"color\":7}]},{\"properties\":{\"food\":20000},\"name\":\"Steel Ingot\",\"tags\":[\"edible\"],\"display\":[{\"character\":254,\"color\":7}]}]');\n\n\nvar $fab0e267a6bf49b4$exports = {};\n$fab0e267a6bf49b4$exports = JSON.parse('[{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":29},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":27}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":30},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":29}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":31},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":30}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":32},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":31}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":33},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":32}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":34},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":33}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":25},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":23}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":23},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":21}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":21}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":23},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":36}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":36}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":21},\"actor\":{\"type\":\"NewItem\",\"data\":22}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":20}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":14},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":9}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":9},\"actor\":{\"type\":\"NewItem\",\"data\":15}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":14}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":17},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":16}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":18},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":17}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":37},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":28}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":38},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":44}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":44},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":10}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":39},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":38}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":37}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":49},\"actor\":{\"type\":\"NewItem\",\"data\":48}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":47}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":50},\"actor\":{\"type\":\"NewItem\",\"data\":48}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":49}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":51},\"actor\":{\"type\":\"NewItem\",\"data\":48}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":50}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":52},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":16}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":35}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":35},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":25}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":54},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":17}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":35}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":55},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":54}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":56},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":55}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":64}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":63},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":53}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":64},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":22}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":57},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":59}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":52}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":58},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"time\":86400},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":60},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":58}]},\"time\":86400},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":59},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":56}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":62}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":61},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":63}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":23}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":62},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":61}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":65},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":3}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":3},\"actor\":{\"type\":\"NewItem\",\"data\":64}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":65}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":66},\"actor\":{\"type\":\"NewItem\",\"data\":45}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":11}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":67},\"actor\":{\"type\":\"NewItem\",\"data\":45}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":66}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":68},\"actor\":{\"type\":\"NewItem\",\"data\":45}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":67}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":45},\"actor\":{\"type\":\"NewItem\",\"data\":45}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":68}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":69},\"actor\":{\"type\":\"NewItem\",\"data\":70}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":19}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":72},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":45}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":73}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":72}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":74}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":1}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":73}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":76},\"actor\":{\"type\":\"NewItem\",\"data\":16}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":4}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":75},\"actor\":{\"type\":\"NewItem\",\"data\":53}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":5}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":77}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":41}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":78}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":42}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":79}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":43}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":80}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":36}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":4},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":76}]},\"time\":14400},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":5},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":75}]},\"time\":14400},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":81},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":74}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":48}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":84},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":74}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":36}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":82}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":81}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":85}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":84}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":20},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":22}]},\"time\":28800},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":57},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":58}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":52}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":87},\"actor\":{\"type\":\"NewItem\",\"data\":88}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":8}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":89},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":69}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":90},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":45}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":70}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":93},\"actor\":{\"type\":\"NewItem\",\"data\":73}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":89}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":74}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":94},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":26}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":93}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":101}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":100}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":99}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":99},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":45}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":26}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":60},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":101}]},\"time\":3600},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":102},\"actor\":{\"type\":\"NewItem\",\"data\":102}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":60}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":91},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":90}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":90}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":92},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":91}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":90}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":103},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":91}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":101}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":104},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":92}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":101}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":91},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":103}]},\"time\":28800},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":92},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":104}]},\"time\":28800},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":57},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":52}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":101}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":95}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":103}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":94}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":26},\"actor\":{\"type\":\"NewItem\",\"data\":96}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":95}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":71},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":70}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":70}]}},{\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":102}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":22}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":105},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":73}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":98}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":106},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":73}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":102}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":107},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":105}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":102}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":107},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":106}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":98}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":108},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":104}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":98}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":109},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":108}]},\"time\":600},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":110},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":104},\"actor\":{\"type\":\"NewItem\",\"data\":111}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":109}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":110}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":114},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":112}]},\"time\":3600},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":26},\"actor\":{\"type\":\"NewItem\",\"data\":98}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":114}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":112},\"actor\":{\"type\":\"NewItem\",\"data\":110}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":26}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":111}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":113},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":112}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":115},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":113}]},\"time\":1800},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":26},\"actor\":{\"type\":\"NewItem\",\"data\":116}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":115}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":118},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":107}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":100}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":119},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":104}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":118}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":120},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":119}]},\"time\":600},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":104},\"actor\":{\"type\":\"NewItem\",\"data\":121}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":120}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":110}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":122},\"actor\":{\"type\":\"NewItem\",\"data\":110}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":26}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":121}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":123},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":122}]},\"time\":1800},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":26},\"actor\":{\"type\":\"NewItem\",\"data\":124}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":123}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":125},\"actor\":{\"type\":\"NewItem\",\"data\":100}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":124}]}},{\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":73},\"actor\":{\"type\":\"NewItem\",\"data\":126}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":125}]}}]');\n\n\nclass $53f3621204de4d76$export$6d08773d2e66f8f2 {\n    static #_ = this.DEFAULT_ITEM = new $53f3621204de4d76$export$6d08773d2e66f8f2(0, \"\", [], [\n        {\n            character: 0,\n            color: 0\n        }\n    ]);\n    constructor(id, name, tags, display, properties = {}){\n        this.properties = {};\n        this.id = id;\n        this.name = name;\n        this.tags = tags;\n        this.display = display;\n        this.properties = properties;\n    }\n    get usedIn() {\n        return ($53f3621204de4d76$export$21cc2ed387caee94 && $53f3621204de4d76$export$21cc2ed387caee94.uses.get(this.id)?.map((id)=>$53f3621204de4d76$export$21cc2ed387caee94.getRecipe(id)) || []).filter((recipe, i, a)=>a.indexOf(recipe) === i);\n    }\n    get resultedBy() {\n        return ($53f3621204de4d76$export$21cc2ed387caee94 && $53f3621204de4d76$export$21cc2ed387caee94.results.get(this.id)?.map((id)=>$53f3621204de4d76$export$21cc2ed387caee94.getRecipe(id)) || []).filter((recipe, i, a)=>a.indexOf(recipe) === i);\n    }\n    get active() {\n        return this.usedIn.some((recipe)=>recipe.time);\n    }\n    get root() {\n        return this.tags.includes(\"root\") || this.tags.includes(\"natural\") || this.resultedBy.length === 0;\n    }\n    depth() {\n        return $53f3621204de4d76$export$21cc2ed387caee94.depths.get(this.id) || 0;\n    }\n    resources() {\n        return [];\n    }\n    required(has = [], seen = new Set()) {\n        if (has.includes(this.id) || seen.has(this.id)) return 0;\n        seen.add(this.id);\n        if (this.root) return 1;\n        return this.resultedBy.reduce((acc, recipe)=>acc + recipe.used().reduce((acc, item)=>acc + $53f3621204de4d76$export$21cc2ed387caee94.getItem(item).required(has, seen), 0), 0);\n    }\n    // recursive\n    isNeededToMake(item) {\n        if (this.id === item.id) return true;\n        if (this.root) return false;\n        return this.resultedBy.some((recipe)=>$53f3621204de4d76$export$21cc2ed387caee94.getItem(recipe.getAnOrigin()).isNeededToMake(item) || recipe.actor && $53f3621204de4d76$export$21cc2ed387caee94.getItem(recipe.getAnActor()).isNeededToMake(item));\n    }\n}\nclass $53f3621204de4d76$export$7f9b7f9a9512098 {\n    constructor(id){\n        this.value = 0;\n        this.time = 0;\n        this.id = id;\n    }\n    get item() {\n        return $53f3621204de4d76$export$21cc2ed387caee94.getItem(this.id);\n    }\n    clone() {\n        let clone = new $53f3621204de4d76$export$7f9b7f9a9512098(this.id);\n        clone.value = this.value;\n        clone.time = this.time;\n        return clone;\n    }\n}\nvar $53f3621204de4d76$export$1f4e9867ac5b0621;\n(function(ItemConditionTypes) {\n    ItemConditionTypes[\"None\"] = \"\";\n    ItemConditionTypes[\"All\"] = \"All\";\n    ItemConditionTypes[\"Is\"] = \"Is\";\n    ItemConditionTypes[\"IsNot\"] = \"IsNot\";\n    ItemConditionTypes[\"WithTag\"] = \"WithTag\";\n    ItemConditionTypes[\"WithoutTag\"] = \"WithoutTag\";\n    ItemConditionTypes[\"PropertyIs\"] = \"PropertyIs\";\n    ItemConditionTypes[\"PropertyIsNot\"] = \"PropertyIsNot\";\n})($53f3621204de4d76$export$1f4e9867ac5b0621 || ($53f3621204de4d76$export$1f4e9867ac5b0621 = {}));\nfunction $53f3621204de4d76$var$cmp(inp, op, ref) {\n    switch(op){\n        case \"=\":\n            return inp === ref;\n        case \">\":\n            return inp > ref;\n        case \"<\":\n            return inp < ref;\n        case \">=\":\n            return inp >= ref;\n        case \"<=\":\n            return inp <= ref;\n        default:\n            return false;\n    }\n}\nclass $53f3621204de4d76$export$8c94884628249f27 {\n    static matches(item, condition) {\n        switch(condition.type){\n            case \"All\":\n                return true;\n            case \"Is\":\n                return item.id === condition.data;\n            case \"IsNot\":\n                return item.id !== condition.data;\n            case \"WithTag\":\n                return item.tags.indexOf(condition.data) > -1;\n            case \"WithoutTag\":\n                return item.tags.indexOf(condition.data) === -1;\n            case \"PropertyIs\":\n                return $53f3621204de4d76$var$cmp(item.properties[condition.data.property], condition.data.op, condition.data.ref);\n            case \"PropertyIsNot\":\n                return !$53f3621204de4d76$var$cmp(item.properties[condition.data.property], condition.data.op, condition.data.ref);\n            default:\n                return false;\n        }\n    }\n}\nclass $53f3621204de4d76$export$1015978009c33b96 {\n    static matches(condition, item) {\n        return condition.conditions.every((c)=>$53f3621204de4d76$export$8c94884628249f27.matches(item, c));\n    }\n}\nvar $53f3621204de4d76$var$RecipeResultType;\n(function(RecipeResultType) {\n    RecipeResultType[\"None\"] = \"\";\n    RecipeResultType[\"SameItem\"] = \"SameItem\";\n    RecipeResultType[\"NewItem\"] = \"NewItem\";\n})($53f3621204de4d76$var$RecipeResultType || ($53f3621204de4d76$var$RecipeResultType = {}));\nclass $53f3621204de4d76$export$e61e05c18d2ee555 {\n    constructor(id, origin, results, options){\n        this.results = [];\n        this.id = id;\n        this.origin = origin;\n        this.results = results;\n        this.originValue = options.originValue;\n        this.time = options.time;\n        this.actor = options.actor;\n    }\n    willOccur(origin, actor, now) {\n        return $53f3621204de4d76$export$1015978009c33b96.matches(this.origin, origin.item) && (!this.originValue || $53f3621204de4d76$var$cmp(origin.value, this.originValue.op, this.originValue.ref)) && (!this.time || now - origin.time >= this.time) && (!this.actor || actor && $53f3621204de4d76$export$1015978009c33b96.matches(this.actor, actor.item) && (!this.actorValue || $53f3621204de4d76$var$cmp(actor.value, this.actorValue.op, this.actorValue.ref)));\n    }\n    static getRandomResult(results, random) {\n        if (results.length === 0) return {\n            origin: {\n                type: \"\",\n                data: null\n            }\n        };\n        if (results.length === 1) return results[0];\n        let total = 0;\n        for(let i = 0; i < results.length; i++)total += results[i].chance || 1;\n        let r = 0;\n        for(let i = 0; i < results.length; i++){\n            r += (results[i].chance || 1) / total;\n            if (r >= random) return results[i];\n        }\n        return results[0];\n    }\n    origins() {\n        return $53f3621204de4d76$export$21cc2ed387caee94 && $53f3621204de4d76$export$21cc2ed387caee94.query(this.origin) || [];\n    }\n    actors() {\n        return $53f3621204de4d76$export$21cc2ed387caee94 && $53f3621204de4d76$export$21cc2ed387caee94.query(this.actor || {\n            conditions: [\n                {\n                    type: \"\",\n                    data: null\n                }\n            ]\n        }) || [];\n    }\n    used() {\n        return [\n            ...this.origins(),\n            ...this.actors()\n        ];\n    }\n    simpleUsed() {\n        return [\n            ...this.getAnOrigin() === 0 ? [] : [\n                this.getAnOrigin()\n            ],\n            ...this.getAnActor() === 0 ? [] : [\n                this.getAnActor()\n            ]\n        ];\n    }\n    resulted() {\n        const resulted = [];\n        for (const result of this.results){\n            if (result.origin.type === \"NewItem\") resulted.push(result.origin.data);\n            else if (result.origin.type === \"SameItem\") resulted.push(...this.origins());\n            if (result.actor) {\n                if (result.actor.type === \"NewItem\") resulted.push(result.actor.data);\n                else if (result.actor.type === \"SameItem\") resulted.push(...this.actors());\n            }\n        }\n        // remove duplicates\n        return resulted.filter((v, i, a)=>a.indexOf(v) === i);\n    }\n    notableResulted() {\n        const resulted = [];\n        for (const result of this.results){\n            if (result.origin.type === \"NewItem\") resulted.push(result.origin.data);\n            if (result.actor) {\n                if (result.actor.type === \"NewItem\") resulted.push(result.actor.data);\n            }\n        }\n        // remove duplicates\n        return resulted.filter((v, i, a)=>a.indexOf(v) === i);\n    }\n    getAnOrigin() {\n        return this.origins()[0] || 0;\n    }\n    getAnActor() {\n        return this.actor ? this.actors()[0] || 0 : 0;\n    }\n    static getResult(item, result) {\n        let newItem = null;\n        switch(result.type){\n            case \"SameItem\":\n                newItem = item.clone();\n                if (result.data) switch(result.data.op){\n                    case \"=\":\n                        newItem.value = result.data.ref;\n                        break;\n                    case \"+\":\n                        newItem.value += result.data.ref;\n                        break;\n                    case \"-\":\n                        newItem.value -= result.data.ref;\n                        break;\n                }\n                break;\n            case \"NewItem\":\n                newItem = new $53f3621204de4d76$export$7f9b7f9a9512098(result.data);\n                break;\n        }\n        return newItem;\n    }\n    static getOptionalResult(item, result) {\n        let newItem = null;\n        switch(result.type){\n            case \"SameItem\":\n                if (!item) return null;\n                console.log(item);\n                newItem = item.clone();\n                if (result.data) switch(result.data.op){\n                    case \"=\":\n                        newItem.value = result.data.ref;\n                        break;\n                    case \"+\":\n                        newItem.value += result.data.ref;\n                        break;\n                    case \"-\":\n                        newItem.value -= result.data.ref;\n                        break;\n                }\n                break;\n            case \"NewItem\":\n                newItem = new $53f3621204de4d76$export$7f9b7f9a9512098(result.data);\n                break;\n        }\n        return newItem;\n    }\n    getResults(origin, actor, random) {\n        if (this.results.length === 0) return [\n            null,\n            null\n        ];\n        const result = !random ? this.results[0] : $53f3621204de4d76$export$e61e05c18d2ee555.getRandomResult(this.results, random);\n        let originResult = $53f3621204de4d76$export$e61e05c18d2ee555.getResult(origin, result.origin);\n        let actorResult = result.actor ? $53f3621204de4d76$export$e61e05c18d2ee555.getOptionalResult(actor, result.actor) : null;\n        return [\n            originResult,\n            actorResult\n        ];\n    }\n}\nclass $53f3621204de4d76$var$Registry {\n    constructor(){\n        this.items = [];\n        this.depths = new Map();\n        this.recipes = [];\n        this.uses = new Map();\n        this.results = new Map();\n        this.items = [];\n        this.recipes = [];\n    }\n    setItems(itemsData) {\n        itemsData = [\n            $53f3621204de4d76$export$6d08773d2e66f8f2.DEFAULT_ITEM,\n            ...itemsData\n        ];\n        itemsData.forEach((itemData)=>{\n            const id = this.items.length;\n            this.items.push(new $53f3621204de4d76$export$6d08773d2e66f8f2(id, itemData.name, itemData.tags, itemData.display, itemData.properties));\n        });\n    }\n    setRecipes(recipesData) {\n        recipesData.forEach((recipeData)=>{\n            const id = this.recipes.length;\n            this.recipes.push(new $53f3621204de4d76$export$e61e05c18d2ee555(id, recipeData.origin, recipeData.results, recipeData));\n        });\n    }\n    refresh() {\n        this.recipes.forEach((_, i)=>{\n            this.recipes[i].used().forEach((id)=>{\n                if (!this.uses.has(id)) this.uses.set(id, []);\n                this.uses.get(id)?.push(i);\n            });\n            this.recipes[i].notableResulted().forEach((id)=>{\n                if (!this.results.has(id)) this.results.set(id, []);\n                this.results.get(id)?.push(i);\n            });\n        });\n        for (const item of this.items)if (item.root) this.depths.set(item.id, 0);\n        let changed = true;\n        while(changed){\n            changed = false;\n            for (const item of this.items){\n                if (item.root || this.depths.has(item.id)) continue;\n                const recipes = item.resultedBy.filter((recipe)=>recipe.used().every((result)=>this.depths.has(result)));\n                if (recipes.length === 0) continue;\n                const depth = Math.max(...recipes.map((recipe)=>Math.max(...recipe.used().map((result)=>this.depths.get(result) || 0)))) + 1;\n                this.depths.set(item.id, depth);\n                changed = true;\n            }\n        }\n    }\n    query(condition) {\n        let results = [];\n        this.items.forEach((item)=>{\n            if ($53f3621204de4d76$export$1015978009c33b96.matches(condition, item)) results.push(item.id);\n        });\n        return results;\n    }\n    itemsData() {\n        return JSON.stringify(this.items.map((item)=>({\n                ...item,\n                id: undefined\n            })));\n    }\n    recipesData() {\n        return JSON.stringify(this.recipes.map((recipe)=>({\n                ...recipe,\n                id: undefined\n            })));\n    }\n    get itemCount() {\n        return this.items.length;\n    }\n    getItem(id) {\n        return this.items[id] || $53f3621204de4d76$export$6d08773d2e66f8f2.DEFAULT_ITEM;\n    }\n    getRecipe(id) {\n        return this.recipes[id];\n    }\n}\nconst $53f3621204de4d76$export$21cc2ed387caee94 = new $53f3621204de4d76$var$Registry();\n$53f3621204de4d76$export$21cc2ed387caee94.setItems((0, (/*@__PURE__*/$parcel$interopDefault($b5a86eb4d6ca5977$exports))));\n$53f3621204de4d76$export$21cc2ed387caee94.setRecipes((0, (/*@__PURE__*/$parcel$interopDefault($fab0e267a6bf49b4$exports))));\n$53f3621204de4d76$export$21cc2ed387caee94.refresh();\nconst $53f3621204de4d76$export$863af0becc8cdadb = ()=>{\n    $53f3621204de4d76$export$21cc2ed387caee94.setItems(JSON.parse($53f3621204de4d76$export$21cc2ed387caee94.itemsData()));\n    $53f3621204de4d76$export$21cc2ed387caee94.setRecipes(JSON.parse($53f3621204de4d76$export$21cc2ed387caee94.recipesData()));\n    $53f3621204de4d76$export$21cc2ed387caee94.refresh();\n};\n\n\nvar $25435e71e18ef34b$exports = {};\n\n$parcel$defineInteropFlag($25435e71e18ef34b$exports);\n\n$parcel$export($25435e71e18ef34b$exports, \"WORLD_SIZE\", () => $25435e71e18ef34b$export$7714bc4c41155738);\n$parcel$export($25435e71e18ef34b$exports, \"CHUNK_SIZE\", () => $25435e71e18ef34b$export$c1abb8bab1e615cd);\n$parcel$export($25435e71e18ef34b$exports, \"Chunk\", () => $25435e71e18ef34b$export$5a0870a55ad02f1a);\n$parcel$export($25435e71e18ef34b$exports, \"World\", () => $25435e71e18ef34b$export$812cd9544993280d);\n$parcel$export($25435e71e18ef34b$exports, \"mlerp\", () => $25435e71e18ef34b$export$89129124b807045f);\n$parcel$export($25435e71e18ef34b$exports, \"generateName\", () => $25435e71e18ef34b$export$5d832d6580b26c5);\n$parcel$export($25435e71e18ef34b$exports, \"generateId\", () => $25435e71e18ef34b$export$567fc7097e064344);\n$parcel$export($25435e71e18ef34b$exports, \"hashString\", () => $25435e71e18ef34b$export$9169be2e06c9c165);\n$parcel$export($25435e71e18ef34b$exports, \"sigmoid\", () => $25435e71e18ef34b$export$3b295495ca3cad7c);\n$parcel$export($25435e71e18ef34b$exports, \"normal\", () => $25435e71e18ef34b$export$411e9a7b4316b872);\n$parcel$export($25435e71e18ef34b$exports, \"default\", () => $25435e71e18ef34b$export$2e2bcd8739ae039);\n$parcel$export($25435e71e18ef34b$exports, \"generateGroup\", () => $25435e71e18ef34b$export$5d84c5ff06f774b1);\n$parcel$export($25435e71e18ef34b$exports, \"assignReputations\", () => $25435e71e18ef34b$export$a0ae4e7d1f7ff4b1);\n\nconst $25435e71e18ef34b$export$7714bc4c41155738 = 40;\nconst $25435e71e18ef34b$export$c1abb8bab1e615cd = 10;\nclass $25435e71e18ef34b$export$5a0870a55ad02f1a {\n    constructor(x, y, items){\n        this.x = x;\n        this.y = y;\n        this.items = items;\n    }\n    get(x, y) {\n        return this.items[y * $25435e71e18ef34b$export$c1abb8bab1e615cd + x] || null;\n    }\n    set(x, y, item) {\n        this.items[y * $25435e71e18ef34b$export$c1abb8bab1e615cd + x] = item;\n    }\n    has(selector) {\n        return this.items.some((item)=>item != null && (0, $53f3621204de4d76$export$1015978009c33b96).matches(selector, item.item));\n    }\n    find(selector) {\n        const index = this.items.findIndex((item)=>item != null && (0, $53f3621204de4d76$export$1015978009c33b96).matches(selector, item.item));\n        if (index === -1) return null;\n        return {\n            x: this.x * $25435e71e18ef34b$export$c1abb8bab1e615cd + index % $25435e71e18ef34b$export$c1abb8bab1e615cd,\n            y: this.y + Math.floor(index / $25435e71e18ef34b$export$c1abb8bab1e615cd),\n            item: this.items[index]\n        };\n    }\n    get active() {\n        return this.items.some((item)=>item != null && item.item.active);\n    }\n    get heatProduced() {\n        return this.items.reduce((a, b)=>a + (b?.item.properties.heat || 0), 0);\n    }\n}\nclass $25435e71e18ef34b$export$812cd9544993280d {\n    constructor(){\n        this.chunks = [];\n        this.heat = [];\n        for(let y = 0; y < $25435e71e18ef34b$export$7714bc4c41155738; y += 1)for(let x = 0; x < $25435e71e18ef34b$export$7714bc4c41155738; x += 1){\n            this.chunks.push(new $25435e71e18ef34b$export$5a0870a55ad02f1a(x, y, new Array($25435e71e18ef34b$export$c1abb8bab1e615cd * $25435e71e18ef34b$export$c1abb8bab1e615cd).fill(null)));\n            this.heat.push(0);\n        }\n    }\n    update(temp) {\n        for(let y = 0; y < $25435e71e18ef34b$export$7714bc4c41155738; y += 1)for(let x = 0; x < $25435e71e18ef34b$export$7714bc4c41155738; x += 1){\n            const index = y * $25435e71e18ef34b$export$7714bc4c41155738 + x;\n            this.heat[index] = $25435e71e18ef34b$export$89129124b807045f(this.heat[index], temp + this.chunks[index].heatProduced, 0.05);\n        }\n        // disperse\n        for(let y = 0; y < $25435e71e18ef34b$export$7714bc4c41155738; y += 1)for(let x = 0; x < $25435e71e18ef34b$export$7714bc4c41155738; x += 1){\n            const index = y * $25435e71e18ef34b$export$7714bc4c41155738 + x;\n            const temp = this.heat[index];\n            const left = x > 0 ? this.heat[index - 1] : temp;\n            const right = x < $25435e71e18ef34b$export$7714bc4c41155738 - 1 ? this.heat[index + 1] : temp;\n            const up = y > 0 ? this.heat[index - $25435e71e18ef34b$export$7714bc4c41155738] : temp;\n            const down = y < $25435e71e18ef34b$export$7714bc4c41155738 - 1 ? this.heat[index + $25435e71e18ef34b$export$7714bc4c41155738] : temp;\n            const avg = (left + right + up + down) / 4;\n            if (avg > temp) this.heat[index] = $25435e71e18ef34b$export$89129124b807045f(temp, avg, 0.2);\n            else this.heat[index] = $25435e71e18ef34b$export$89129124b807045f(temp, avg, 0.01);\n        }\n    }\n    get size() {\n        return $25435e71e18ef34b$export$7714bc4c41155738 * $25435e71e18ef34b$export$c1abb8bab1e615cd;\n    }\n    getChunk(x, y) {\n        return this.chunks[y * $25435e71e18ef34b$export$7714bc4c41155738 + x];\n    }\n    active() {\n        return this.chunks.filter((chunk)=>chunk.active).map((chunk)=>{\n            const res = [];\n            let index = chunk.items.findIndex((item)=>item != null && item.item.active);\n            while(index !== -1){\n                res.push({\n                    x: chunk.x * $25435e71e18ef34b$export$c1abb8bab1e615cd + index % $25435e71e18ef34b$export$c1abb8bab1e615cd,\n                    y: chunk.y * $25435e71e18ef34b$export$c1abb8bab1e615cd + Math.floor(index / $25435e71e18ef34b$export$c1abb8bab1e615cd),\n                    item: chunk.items[index]\n                });\n                index = chunk.items.findIndex((item, i)=>i > index && item != null && item.item.active);\n            }\n            return res;\n        }).flat();\n    }\n    get(x, y) {\n        return this.getChunk(Math.floor(x / $25435e71e18ef34b$export$c1abb8bab1e615cd), Math.floor(y / $25435e71e18ef34b$export$c1abb8bab1e615cd))?.get(x % $25435e71e18ef34b$export$c1abb8bab1e615cd, y % $25435e71e18ef34b$export$c1abb8bab1e615cd) || null;\n    }\n    set(x, y, item) {\n        this.getChunk(Math.floor(x / $25435e71e18ef34b$export$c1abb8bab1e615cd), Math.floor(y / $25435e71e18ef34b$export$c1abb8bab1e615cd)).set(x % $25435e71e18ef34b$export$c1abb8bab1e615cd, y % $25435e71e18ef34b$export$c1abb8bab1e615cd, item);\n    }\n    localWorld(x, y, size) {\n        const local = [];\n        for(let dy = -size; dy <= size; dy += 1)for(let dx = -size; dx <= size; dx += 1){\n            const xx = x + dx;\n            const yy = y + dy;\n            if (xx < 0 || yy < 0 || xx >= this.size || yy >= this.size) local.push({\n                x: xx,\n                y: yy,\n                item: null\n            });\n            else local.push({\n                x: xx,\n                y: yy,\n                item: this.get(xx, yy)\n            });\n        }\n        return local;\n    }\n}\nfunction $25435e71e18ef34b$export$5d832d6580b26c5() {\n    const vowels = \"eaiou\";\n    const consonants = \"tnsrhldcymfwgpbvkxjqz\";\n    const syllables = Math.round(Math.random() * 3 + 1);\n    let name = \"\";\n    for(let i = 0; i < syllables; i += 1){\n        name += consonants[Math.floor(Math.random() ** 2 * consonants.length)];\n        name += vowels[Math.floor(Math.random() * vowels.length)];\n        if (Math.random() < 0.5) name += consonants[Math.floor(Math.random() ** 2 * consonants.length)];\n    }\n    return name;\n}\nfunction $25435e71e18ef34b$export$567fc7097e064344() {\n    return Math.random().toString(36).substring(2, 9);\n}\nfunction $25435e71e18ef34b$export$9169be2e06c9c165(str) {\n    let hash = 0;\n    for(let i = 0; i < str.length; i += 1){\n        hash += str.charCodeAt(i);\n        hash += hash << 10;\n        hash ^= hash >> 6;\n        hash += hash << 3;\n    }\n    return hash;\n}\nfunction $25435e71e18ef34b$export$89129124b807045f(a, b, t) {\n    return a + (b - a) * t;\n}\nfunction $25435e71e18ef34b$export$3b295495ca3cad7c(x) {\n    return 1 / (1 + Math.exp(-x));\n}\nfunction $25435e71e18ef34b$export$411e9a7b4316b872(x) {\n    return Math.exp(-(x ** 2));\n}\nvar $25435e71e18ef34b$var$Needs;\n(function(Needs) {\n    Needs[\"Health\"] = \"health\";\n    Needs[\"Hunger\"] = \"hunger\";\n    Needs[\"Temperature\"] = \"temperature\";\n    Needs[\"Boredom\"] = \"boredom\";\n})($25435e71e18ef34b$var$Needs || ($25435e71e18ef34b$var$Needs = {}));\nvar $25435e71e18ef34b$var$Direction;\n(function(Direction) {\n    Direction[Direction[\"Here\"] = 0] = \"Here\";\n    Direction[Direction[\"Up\"] = 1] = \"Up\";\n    Direction[Direction[\"Left\"] = 2] = \"Left\";\n    Direction[Direction[\"Down\"] = 3] = \"Down\";\n    Direction[Direction[\"Right\"] = 4] = \"Right\";\n})($25435e71e18ef34b$var$Direction || ($25435e71e18ef34b$var$Direction = {}));\nvar $25435e71e18ef34b$var$ActionType;\n(function(ActionType) {\n    ActionType[\"Nothing\"] = \"nothing\";\n    ActionType[\"Move\"] = \"move\";\n    ActionType[\"Interact\"] = \"interact\";\n    ActionType[\"Eat\"] = \"eat\";\n})($25435e71e18ef34b$var$ActionType || ($25435e71e18ef34b$var$ActionType = {}));\nconst $25435e71e18ef34b$var$Action = {\n    Nothing: ()=>({\n            type: \"nothing\",\n            data: {}\n        }),\n    Move: (direction)=>({\n            type: \"move\",\n            data: {\n                direction: direction\n            }\n        }),\n    Interact: (direction)=>({\n            type: \"interact\",\n            data: {\n                direction: direction\n            }\n        }),\n    Eat: ()=>({\n            type: \"eat\",\n            data: {}\n        })\n};\nvar $25435e71e18ef34b$var$NounType;\n(function(NounType) {\n    NounType[\"Person\"] = \"person\";\n    NounType[\"Place\"] = \"place\";\n    NounType[\"Thing\"] = \"thing\";\n})($25435e71e18ef34b$var$NounType || ($25435e71e18ef34b$var$NounType = {}));\nconst $25435e71e18ef34b$var$Noun = {\n    Person: (id)=>({\n            type: \"person\",\n            data: {\n                id: id\n            }\n        }),\n    Place: (x, y)=>({\n            type: \"place\",\n            data: {\n                x: x,\n                y: y\n            }\n        }),\n    Thing: (selector)=>({\n            type: \"thing\",\n            data: {\n                selector: selector\n            }\n        })\n};\nvar $25435e71e18ef34b$var$MemoryType;\n(function(MemoryType) {\n    MemoryType[\"Location\"] = \"location\";\n    MemoryType[\"PersonKnows\"] = \"personKnows\";\n    MemoryType[\"Exists\"] = \"exists\";\n})($25435e71e18ef34b$var$MemoryType || ($25435e71e18ef34b$var$MemoryType = {}));\nconst $25435e71e18ef34b$var$Memory = {\n    Location: (noun, x, y, time)=>({\n            type: \"location\",\n            data: {\n                noun: noun,\n                x: x,\n                y: y\n            },\n            time: time\n        }),\n    PersonKnows: (person, memory, time)=>({\n            type: \"personKnows\",\n            data: {\n                person: person,\n                memory: memory\n            },\n            time: time\n        }),\n    Exists: (noun, time)=>({\n            type: \"exists\",\n            data: {\n                noun: noun\n            },\n            time: time\n        })\n};\nvar $25435e71e18ef34b$var$ObjectiveType;\n(function(ObjectiveType) {\n    ObjectiveType[\"FulfillNeed\"] = \"fulfillNeed\";\n    ObjectiveType[\"Obtain\"] = \"obtain\";\n    ObjectiveType[\"BoredomTask\"] = \"boredomTask\";\n})($25435e71e18ef34b$var$ObjectiveType || ($25435e71e18ef34b$var$ObjectiveType = {}));\nvar $25435e71e18ef34b$var$BoredomTaskType;\n(function(BoredomTaskType) {\n    BoredomTaskType[\"Craft\"] = \"craft\";\n    BoredomTaskType[\"Organize\"] = \"organize\";\n    BoredomTaskType[\"Farm\"] = \"farm\";\n    BoredomTaskType[\"Build\"] = \"build\";\n})($25435e71e18ef34b$var$BoredomTaskType || ($25435e71e18ef34b$var$BoredomTaskType = {}));\nconst $25435e71e18ef34b$var$Objective = {\n    FulfillNeed: (need)=>({\n            type: \"fulfillNeed\",\n            data: {\n                need: need\n            }\n        }),\n    Obtain: (noun, another = false)=>({\n            type: \"obtain\",\n            data: {\n                noun: noun,\n                another: another,\n                children: []\n            }\n        }),\n    BoredomTask: (task, expiry)=>({\n            type: \"boredomTask\",\n            data: {\n                task: task,\n                expiry: expiry\n            }\n        })\n};\nclass $25435e71e18ef34b$export$2e2bcd8739ae039 {\n    constructor(id, name, surname, born, x, y){\n        this.home = null;\n        this.health = 100;\n        this.hunger = 100;\n        this.temperature = 0;\n        this.score = 0;\n        this.reputations = {};\n        this.needs = {\n            [\"health\"]: 0,\n            [\"hunger\"]: 0,\n            [\"temperature\"]: 0,\n            [\"boredom\"]: 0\n        };\n        this.memory = [];\n        this.objectives = [];\n        this.long = {};\n        this.short = {};\n        this.common = {};\n        this.holding = null;\n        this.nextAction = null;\n        this.id = id;\n        this.name = name;\n        this.surname = surname;\n        this.born = born;\n        this.x = x;\n        this.y = y;\n        this.gender = Math.random();\n    }\n    male() {\n        return this.gender < 0.5;\n    }\n    female() {\n        return this.gender > 0.5;\n    }\n    get fullName() {\n        return `${this.name} ${this.surname}`;\n    }\n    get color() {\n        return Math.abs($25435e71e18ef34b$export$9169be2e06c9c165(this.surname)) % 64;\n    }\n    get altColor() {\n        return Math.abs($25435e71e18ef34b$export$9169be2e06c9c165(this.name)) % 64;\n    }\n    get display() {\n        const myDisplay = [\n            {\n                character: this.male() ? 11 : 12,\n                color: this.color\n            }\n        ];\n        const holdingDisplay = this.holding?.item.display ?? [];\n        return [\n            ...myDisplay,\n            ...holdingDisplay\n        ];\n    }\n    get known() {\n        return this.memory.filter((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\").map((memory)=>(0, $53f3621204de4d76$export$21cc2ed387caee94).query(memory.data.noun.data.selector)).flat().filter((item, index, self)=>self.indexOf(item) === index);\n    }\n    hungerSeverity() {\n        return this.hunger < 20 ? 1 : $25435e71e18ef34b$export$3b295495ca3cad7c((50 - this.hunger) / 10);\n    }\n    update(world) {\n        const temp = world.heat[this.outerIndex()];\n        this.temperature = $25435e71e18ef34b$export$89129124b807045f(this.temperature, temp, 0.02);\n        this.score += (this.temperature / 20) ** 3;\n        if (this.health < 100) {\n            this.score -= ((100 - this.health) / 100) ** 2;\n            this.health += $25435e71e18ef34b$export$3b295495ca3cad7c((this.hunger - 50) / 10) * 0.01;\n        }\n        const tempEffect = 1 - $25435e71e18ef34b$export$3b295495ca3cad7c(this.temperature / 2);\n        this.hunger -= 0.03 * (0.1 + tempEffect * 0.9);\n        if (this.hunger < 0) {\n            this.health -= 1.0 * tempEffect * tempEffect;\n            this.hunger = 0;\n        }\n        if (this.hunger > 100) {\n            this.health += this.hunger - 100;\n            this.hunger = 100;\n        }\n        if (this.health > 100) {\n            this.score += (this.health - 100) ** 2;\n            this.health = 100;\n        }\n        if (this.score < 0) this.score = 0;\n    }\n    think(world, people, now) {\n        // compute needs\n        this.needs[\"health\"] = (80 - Math.min(this.health, 80)) ** 3;\n        this.needs[\"hunger\"] = (90 - Math.min(this.hunger, 90)) ** 2;\n        this.needs[\"temperature\"] = Math.max((5 - this.temperature) * 10, 0);\n        this.needs[\"boredom\"] = this.health > 80 && this.hunger > 80 ? 60 : 0;\n        const local = world.localWorld(this.x, this.y, 10);\n        const localPeople = people.filter((person)=>Math.abs(person.x - this.x) < 10 && Math.abs(person.y - this.y) < 10);\n        const indices = [\n            {\n                x: this.x,\n                y: this.y\n            },\n            {\n                x: this.x,\n                y: this.y - 1\n            },\n            {\n                x: this.x - 1,\n                y: this.y\n            },\n            {\n                x: this.x,\n                y: this.y + 1\n            },\n            {\n                x: this.x + 1,\n                y: this.y\n            }\n        ];\n        // forget memories after a day\n        this.memory = this.memory.filter((memory)=>now - memory.time < 86400);\n        for (const person of localPeople){\n            this.memory = this.memory.filter((memory)=>!(memory.type === \"exists\" && memory.data.noun.type === \"person\" && memory.data.noun.data.id === person.id));\n            if (person.id !== this.id) this.memory.push($25435e71e18ef34b$var$Memory.Exists($25435e71e18ef34b$var$Noun.Person(person.id), now));\n            this.memory = this.memory.filter((memory)=>!(memory.type === \"location\" && memory.data.noun.type === \"person\" && memory.data.noun.data.id === person.id));\n            if (person.id !== this.id) this.memory.push($25435e71e18ef34b$var$Memory.Location({\n                type: \"person\",\n                data: {\n                    id: person.id\n                }\n            }, person.x, person.y, now));\n        }\n        // if we find out an item is missing, remove it from memory\n        this.memory = this.memory.filter((memory)=>{\n            if (memory.type != \"location\" || memory.data.noun.type != \"thing\") return true;\n            if (memory.data.x < this.x - 10 || memory.data.x > this.x + 10 || memory.data.y < this.y - 10 || memory.data.y > this.y + 10) return true;\n            const item = local.find(({ x: x, y: y })=>x === memory.data.x && y === memory.data.y);\n            return !(item == null || item.item == null || !(0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item.item.item)); // eww\n        });\n        // similar but for people\n        this.memory = this.memory.filter((memory)=>{\n            if (memory.type != \"location\" || memory.data.noun.type != \"person\") return true;\n            // if two people move away at the exact time, can unintentionally forget where they are\n            if (memory.data.x < this.x - 8 || memory.data.x > this.x + 8 || memory.data.y < this.y - 8 || memory.data.y > this.y + 8) return true;\n            const person = localPeople.find(({ x: x, y: y })=>x === memory.data.x && y === memory.data.y);\n            return !(person == null || person.id === this.id);\n        });\n        for (const { x: x, y: y, item: item } of local)if (item != null) {\n            if (item.item.root) this.common[item.id] = (this.common[item.id] ?? 0) + 1;\n            if (!this.short[\"justDropped\"]) {\n                let i = 0;\n                for (const objective of this.objectives.slice(0, this.objectives.length - 1)){\n                    if (objective.type === \"obtain\" && !objective.data.another) {\n                        if ((0, $53f3621204de4d76$export$1015978009c33b96).matches(objective.data.noun.data.selector, item.item)) {\n                            this.completeAltObjective(i);\n                            this.memory.push($25435e71e18ef34b$var$Memory.Location(objective.data.noun, x, y, now));\n                            break;\n                        }\n                    }\n                    i += 1;\n                }\n            }\n            if (item.item.tags.includes(\"important\") || item.item.tags.includes(\"foodSource\") || item.item.tags.includes(\"heatSource\") || item.item.tags.includes(\"healing\") || item.item.tags.includes(\"edible\")) {\n                this.memory = this.memory.filter((memory)=>!(memory.type === \"location\" && memory.data.noun.type === \"thing\" && memory.data.noun.data.selector.conditions.find((condition)=>condition.type === (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is && condition.data === item.item.id)));\n                this.memory.push($25435e71e18ef34b$var$Memory.Location({\n                    type: \"thing\",\n                    data: {\n                        selector: {\n                            conditions: [\n                                {\n                                    type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                                    data: item.item.id\n                                }\n                            ]\n                        }\n                    }\n                }, x, y, now));\n            }\n        }\n        let focus = \"health\";\n        for (const need of [\n            \"health\",\n            \"hunger\",\n            \"temperature\",\n            \"boredom\"\n        ])if (this.needs[need] > this.needs[focus]) focus = need;\n        // focus = Needs.Hunger;\n        if (this.objectives.length === 0 || this.objectives[0].type !== \"fulfillNeed\" || this.objectives[0].data.need !== focus) {\n            this.objectives = [];\n            this.addObjective($25435e71e18ef34b$var$Objective.FulfillNeed(focus));\n        }\n        const rootObjective = this.objectives[0];\n        if (rootObjective.type === \"fulfillNeed\") {\n            if (rootObjective.data.need === \"hunger\") {\n                if (Math.random() < 0.002) {\n                    this.objectives = [\n                        rootObjective\n                    ];\n                    this.short = {};\n                }\n            }\n        }\n        const objective = this.objectives[this.objectives.length - 1];\n        this.nextAction = $25435e71e18ef34b$var$Action.Nothing();\n        if (this.short[\"goto\"] != null) {\n            if (this.x === this.short[\"goto\"].x && this.y === this.short[\"goto\"].y) this.short[\"goto\"] = null;\n            else {\n                if (this.short[\"calculated\"]) ;\n                else {\n                    const dx = this.short[\"goto\"].x - this.x;\n                    const dy = this.short[\"goto\"].y - this.y;\n                    const worldAtGoto = world.get(this.short[\"goto\"].x, this.short[\"goto\"].y);\n                    if (worldAtGoto != null && worldAtGoto.item.tags.includes(\"blocking\")) this.short[\"goto\"] = this.gotoNoBlocking(world, this.short[\"goto\"].x, this.short[\"goto\"].y);\n                    if (Math.abs(dx) > Math.abs(dy)) {\n                        if (dx > 0) this.nextAction = $25435e71e18ef34b$var$Action.Move(4);\n                        else this.nextAction = $25435e71e18ef34b$var$Action.Move(2);\n                    } else if (dy > 0) this.nextAction = $25435e71e18ef34b$var$Action.Move(3);\n                    else this.nextAction = $25435e71e18ef34b$var$Action.Move(1);\n                    const next = indices[this.nextAction.data.direction];\n                    if (world.get(next.x, next.y) != null && world.get(next.x, next.y)?.item.tags.includes(\"blocking\") || people.some((person)=>person.id != this.id && person.x === next.x && person.y === next.y)) this.nextAction = this.moveRandomly(world, indices);\n                }\n            }\n        } else if (objective.type === \"fulfillNeed\") {\n            if (objective.data.need === \"health\") {\n                if (this.holding != null && this.holding.item.tags.includes(\"healing\")) this.nextAction = $25435e71e18ef34b$var$Action.Eat();\n                else if (world.get(this.x, this.y) != null && world.get(this.x, this.y).item.tags.includes(\"healing\")) {\n                    if (this.holding != null) this.tryToDrop(world, indices, now);\n                    else this.nextAction = $25435e71e18ef34b$var$Action.Interact(0);\n                } else {\n                    const allHealing = (0, $53f3621204de4d76$export$21cc2ed387caee94).items.filter((item)=>item.tags.includes(\"healing\"));\n                    this.addObjective($25435e71e18ef34b$var$Objective.Obtain($25435e71e18ef34b$var$Noun.Thing({\n                        conditions: [\n                            {\n                                type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                                data: allHealing[Math.floor(Math.random() * allHealing.length)].id\n                            }\n                        ]\n                    }), false));\n                }\n            } else if (objective.data.need === \"hunger\") {\n                if (this.holding != null && this.holding.item.tags.includes(\"edible\")) this.nextAction = $25435e71e18ef34b$var$Action.Eat();\n                else if (world.get(this.x, this.y) != null && world.get(this.x, this.y).item.tags.includes(\"edible\")) {\n                    if (this.holding != null) this.tryToDrop(world, indices, now);\n                    else this.nextAction = $25435e71e18ef34b$var$Action.Interact(0);\n                } else {\n                    // priority when NOT SEVERE: make a food source / work towards good food\n                    // priority when SEVERE: find food\n                    const nutritionScore = (item)=>{\n                        const food = item.properties.food;\n                        const heal = item.properties.heal || 0;\n                        return (food + Math.log2(heal + 1)) ** 2;\n                    };\n                    const foodScore = (item)=>{\n                        const nutrition = nutritionScore(item);\n                        const depth = item.depth();\n                        const knowsLocation = this.memory.some((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item));\n                        const effort = (Math.log2(depth) * item.required(this.known)) ** (knowsLocation ? 1 : 2) + 1;\n                        return nutrition / effort * (0.8 + Math.random() * 0.4);\n                    };\n                    const foodSourceScore = (item)=>{\n                        const foodItMakes = item.usedIn.map((recipe)=>recipe.notableResulted().map((id)=>(0, $53f3621204de4d76$export$21cc2ed387caee94).getItem(id))).flat().filter((item)=>item.tags.includes(\"edible\"));\n                        const score = foodItMakes.map(nutritionScore).reduce((a, b)=>a + b, 0);\n                        const depth = 0;\n                        const knowsLocation = this.memory.some((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item));\n                        const effort = (depth + 1) ** (knowsLocation ? 1 : 2);\n                        return score / effort * (0.8 + Math.random() * 0.4);\n                    };\n                    const allEdible = (0, $53f3621204de4d76$export$21cc2ed387caee94).items.filter((item)=>item.tags.includes(\"edible\"));\n                    const allFoodSources = (0, $53f3621204de4d76$export$21cc2ed387caee94).items.filter((item)=>item.tags.includes(\"foodSource\"));\n                    {\n                        // find food\n                        const food = allEdible.filter((item)=>foodScore(item) > 0);\n                        const bestFood = food.sort((a, b)=>foodScore(b) - foodScore(a))[0];\n                        console.table(food.map((item)=>({\n                                name: item.name,\n                                score: foodScore(item),\n                                nutrition: nutritionScore(item),\n                                effort: (item.depth() * item.required(this.known)) ** (this.memory.some((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item)) ? 1 : 2) + 1\n                            })));\n                        if (bestFood) this.addObjective($25435e71e18ef34b$var$Objective.Obtain($25435e71e18ef34b$var$Noun.Thing({\n                            conditions: [\n                                {\n                                    type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                                    data: bestFood.id\n                                }\n                            ]\n                        }), false));\n                    }\n                }\n            } else if (objective.data.need === \"temperature\" || objective.data.need === \"boredom\") {\n                // fire?\n                const fire = (0, $53f3621204de4d76$export$21cc2ed387caee94).getItem(57);\n                const kindling = (0, $53f3621204de4d76$export$21cc2ed387caee94).getItem(52);\n                const fireMemory = this.locationMemory(fire);\n                if (fireMemory) {\n                    if (this.temperature < 2) {\n                        if (world.chunks[this.outerIndex()].items.some((item)=>item != null && item.item.id === fire.id)) {\n                            // randomly move within chunk\n                            const dir = [\n                                1,\n                                2,\n                                3,\n                                4\n                            ].filter((dir)=>{\n                                const next = indices[dir];\n                                const chunkIndex = next.x / $25435e71e18ef34b$export$c1abb8bab1e615cd + next.y / $25435e71e18ef34b$export$c1abb8bab1e615cd * $25435e71e18ef34b$export$7714bc4c41155738;\n                                return chunkIndex === this.outerIndex();\n                            });\n                            this.nextAction = $25435e71e18ef34b$var$Action.Move(dir[Math.floor(Math.random() * dir.length)]);\n                        } else {\n                            this.nextAction = this.moveRandomly(world, indices);\n                            this.short[\"goto\"] = this.gotoNoBlocking(world, fireMemory.data.x, fireMemory.data.y);\n                        }\n                    } else {\n                        if (this.holding && this.holding.item.id === kindling.id) {\n                            // put kindling near fire\n                            if (world.chunks[this.outerIndex()].items.some((item)=>item != null && item.item.id === fire.id)) {\n                                this.tryToDrop(world, indices, now);\n                                this.short[\"goto\"] = this.gotoNoBlocking(world, this.x + Math.floor(Math.random() * 10 - 5), this.y + Math.floor(Math.random() * 10 - 5));\n                            } else {\n                                this.nextAction = this.moveRandomly(world, indices);\n                                this.short[\"goto\"] = this.gotoNoBlocking(world, fireMemory.data.x, fireMemory.data.y);\n                            }\n                        } else if (world.get(this.x, this.y) != null && world.get(this.x, this.y).id === kindling.id) this.nextAction = $25435e71e18ef34b$var$Action.Interact(0);\n                        else {\n                            this.addObjective($25435e71e18ef34b$var$Objective.Obtain($25435e71e18ef34b$var$Noun.Thing({\n                                conditions: [\n                                    {\n                                        type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                                        data: kindling.id\n                                    }\n                                ]\n                            }), true));\n                            this.short[\"goto\"] = this.gotoNoBlocking(world, this.x + Math.floor(Math.random() * 10 - 5), this.y + Math.floor(Math.random() * 10 - 5));\n                        }\n                    }\n                } else this.addObjective($25435e71e18ef34b$var$Objective.Obtain($25435e71e18ef34b$var$Noun.Thing({\n                    conditions: [\n                        {\n                            type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                            data: fire.id\n                        }\n                    ]\n                }), false));\n            } else objective.data.need;\n        //   ___  ___ _____ _   ___ _  _ \n        //  / _ \\| _ )_   _/_\\ |_ _| \\| |\n        // | (_) | _ \\ | |/ _ \\ | || .` |\n        //  \\___/|___/ |_/_/ \\_\\___|_|\\_|\n        } else if (objective.type === \"obtain\") {\n            const item = (0, $53f3621204de4d76$export$21cc2ed387caee94).getItem((0, $53f3621204de4d76$export$21cc2ed387caee94).query(objective.data.noun.data.selector)[0]);\n            const memory = this.memory.find((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item));\n            if (!objective.data.another && this.holding != null && (0, $53f3621204de4d76$export$1015978009c33b96).matches(objective.data.noun.data.selector, this.holding.item)) {\n                this.nextAction = $25435e71e18ef34b$var$Action.Nothing();\n                this.completeObjective();\n            } else if (!this.short[\"justDropped\"] && indices.map((i)=>world.get(i.x, i.y)).some((other)=>other != null && other.item.id === item.id)) {\n                const dir = indices.findIndex((i)=>world.get(i.x, i.y) != null && world.get(i.x, i.y).item.id === item.id);\n                this.memory.push($25435e71e18ef34b$var$Memory.Location($25435e71e18ef34b$var$Noun.Thing({\n                    conditions: [\n                        {\n                            type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                            data: item.id\n                        }\n                    ]\n                }), indices[dir].x, indices[dir].y, now));\n                this.completeObjective();\n            } else if (!objective.data.another && !this.short[\"justDropped\"] && memory) this.short[\"goto\"] = this.gotoNoBlocking(world, memory.data.x, memory.data.y);\n            else if (!item.root) {\n                const recipes = item.resultedBy;\n                const recipe = recipes.find((recipe)=>recipe.simpleUsed().map((id)=>(0, $53f3621204de4d76$export$21cc2ed387caee94).getItem(id)).every((item)=>this.holding != null && this.holding.id === item.id || this.memory.find((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item))));\n                if (recipe) {\n                    const shouldBeHolding = recipe.actor;\n                    const shouldBeNextTo = recipe.origin;\n                    const holdingTheActor = !!shouldBeHolding && this.holding != null && (0, $53f3621204de4d76$export$1015978009c33b96).matches(shouldBeHolding, this.holding.item) || !shouldBeHolding && !this.holding;\n                    const nextToOriginIndex = indices.findIndex((i)=>world.get(i.x, i.y) != null && (0, $53f3621204de4d76$export$1015978009c33b96).matches(shouldBeNextTo, world.get(i.x, i.y).item));\n                    if (!holdingTheActor) {\n                        if (this.holding && (!shouldBeHolding || !(0, $53f3621204de4d76$export$1015978009c33b96).matches(shouldBeHolding, this.holding.item))) this.tryToDrop(world, indices, now);\n                        else if (indices.some((i)=>world.get(i.x, i.y) != null && (0, $53f3621204de4d76$export$1015978009c33b96).matches(shouldBeHolding, world.get(i.x, i.y).item))) this.nextAction = $25435e71e18ef34b$var$Action.Interact(indices.findIndex((i)=>world.get(i.x, i.y) != null && world.get(i.x, i.y).item.id === shouldBeHolding.conditions[0].data));\n                        else {\n                            const item = (0, $53f3621204de4d76$export$21cc2ed387caee94).getItem(recipe.getAnActor());\n                            // find memory\n                            const memory = this.memory.find((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item));\n                            if (memory) this.short[\"goto\"] = this.gotoNoBlocking(world, memory.data.x, memory.data.y);\n                            else {\n                                this.addObjective($25435e71e18ef34b$var$Objective.Obtain($25435e71e18ef34b$var$Noun.Thing({\n                                    conditions: [\n                                        {\n                                            type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                                            data: item.id\n                                        }\n                                    ]\n                                }), true), objective);\n                                this.nextAction = $25435e71e18ef34b$var$Action.Nothing();\n                            }\n                        }\n                    } else if (nextToOriginIndex === -1) {\n                        if (this.holding && (!shouldBeHolding || !(0, $53f3621204de4d76$export$1015978009c33b96).matches(shouldBeHolding, this.holding.item))) this.tryToDrop(world, indices, now);\n                        else {\n                            const item = (0, $53f3621204de4d76$export$21cc2ed387caee94).getItem(recipe.getAnOrigin());\n                            // find memory\n                            const memory = this.memory.find((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item));\n                            if (memory) this.short[\"goto\"] = this.gotoNoBlocking(world, memory.data.x, memory.data.y);\n                            else {\n                                this.addObjective($25435e71e18ef34b$var$Objective.Obtain($25435e71e18ef34b$var$Noun.Thing({\n                                    conditions: [\n                                        {\n                                            type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                                            data: item.id\n                                        }\n                                    ]\n                                }), true), objective);\n                                this.nextAction = $25435e71e18ef34b$var$Action.Nothing();\n                            }\n                        }\n                    } else this.nextAction = $25435e71e18ef34b$var$Action.Interact(nextToOriginIndex);\n                } else {\n                    const itemEffort = (item)=>{\n                        if (this.objectives.some((objective)=>objective.type === \"obtain\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(objective.data.noun.data.selector, item) && !objective.data.another)) return Infinity;\n                        const craftEffort = (item.depth() || 0) ** 2 + 1;\n                        const canFindEasily = this.memory.find((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item)) || local.find(({ item: i })=>i != null && i.item.id === item.id);\n                        const howCommon = item.resources().reduce((a, b)=>a + (this.common[b.id] ?? 0), 0);\n                        return (canFindEasily ? Math.sqrt(craftEffort) / 2 : craftEffort) / Math.log(howCommon + Math.E) * (0.8 + Math.random() * 0.4);\n                    };\n                    const recipeEffort = (recipe)=>{\n                        if (recipe.actor && recipe.results.some((result)=>result.actor && result.actor.type === \"SameItem\")) return Infinity;\n                        return itemEffort((0, $53f3621204de4d76$export$21cc2ed387caee94).getItem(recipe.getAnOrigin())) * (recipe.actor ? itemEffort((0, $53f3621204de4d76$export$21cc2ed387caee94).getItem(recipe.getAnActor())) : 1) * (recipe.time || 1);\n                    };\n                    const bestRecipe = recipes.sort((a, b)=>recipeEffort(a) - recipeEffort(b))[0];\n                    const items = bestRecipe.simpleUsed().map((id)=>(0, $53f3621204de4d76$export$21cc2ed387caee94).getItem(id));\n                    const seen = new Set();\n                    for (const item of items.sort((a, b)=>a.active || b.active ? a.active === b.active ? 0 : a.active ? -1 : 1 : a.depth() - b.depth())){\n                        if (seen.has(item.id)) this.objectives[this.objectives.length - 1].data.another = true;\n                        this.addObjective($25435e71e18ef34b$var$Objective.Obtain($25435e71e18ef34b$var$Noun.Thing({\n                            conditions: [\n                                {\n                                    type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                                    data: item.id\n                                }\n                            ]\n                        }), false), objective);\n                        seen.add(item.id);\n                    }\n                    this.nextAction = $25435e71e18ef34b$var$Action.Nothing();\n                }\n            } else {\n                // first see if in vicinity\n                const item = this.nearestItem(local, objective.data.noun.data.selector);\n                if (item != null && item.item != null) this.short[\"goto\"] = this.gotoNoBlocking(world, item.x, item.y);\n                else if (this.whereIsItem(objective.data.noun.data.selector)) {\n                    const location = this.whereIsItem(objective.data.noun.data.selector);\n                    this.short[\"goto\"] = this.gotoNoBlocking(world, location.x, location.y);\n                } else {\n                    this.short[\"searched\"] = [\n                        ...this.short[\"searched\"] ?? [],\n                        [\n                            this.x,\n                            this.y\n                        ]\n                    ];\n                    let x = Math.min(Math.max(this.x + Math.round(Math.random() * 20 - 10), 0), world.size - 1);\n                    let y = Math.min(Math.max(this.y + Math.round(Math.random() * 20 - 10), 0), world.size - 1);\n                    let limit = 0;\n                    while(this.short[\"searched\"].find(([sx, sy])=>sx > x - 10 && sx < x + 10 && sy > y - 10 && sy < y + 10)){\n                        x = Math.min(Math.max(this.x + Math.round(Math.random() * (20 + limit * 4) - (10 + limit * 2)), 0), world.size - 1);\n                        y = Math.min(Math.max(this.y + Math.round(Math.random() * (20 + limit * 4) - (10 + limit * 2)), 0), world.size - 1);\n                        limit += 1;\n                        if (limit > 10) break;\n                    }\n                    this.short[\"goto\"] = this.gotoNoBlocking(world, x, y);\n                }\n            }\n        }\n        if (this.nextAction.type === \"nothing\" && Math.random() < 0.5) this.nextAction = this.moveRandomly(world, indices);\n    }\n    gotoNoBlocking(world, x, y) {\n        console.log(\"GOTO NOT BLOCKING:\", x, y, world.get(x, y), world.get(x, y) && world.get(x, y).item.tags.includes(\"blocking\"));\n        if (world.get(x, y) != null && world.get(x, y).item.tags.includes(\"blocking\")) {\n            for (const [xx, yy] of [\n                [\n                    x,\n                    y + 1\n                ],\n                [\n                    x,\n                    y - 1\n                ],\n                [\n                    x + 1,\n                    y\n                ],\n                [\n                    x - 1,\n                    y\n                ]\n            ]){\n                if (world.get(xx, yy) == null || !world.get(xx, yy).item.tags.includes(\"blocking\")) return {\n                    x: xx,\n                    y: yy\n                };\n            }\n            return {\n                x: x,\n                y: y\n            };\n        } else return {\n            x: x,\n            y: y\n        };\n    }\n    moveRandomly(world, indices) {\n        const dirs = [\n            1,\n            2,\n            3,\n            4\n        ].filter((dir)=>{\n            const next = indices[dir];\n            return world.get(next.x, next.y) == null || !world.get(next.x, next.y).item.tags.includes(\"blocking\");\n        });\n        if (dirs.length > 0) return $25435e71e18ef34b$var$Action.Move(dirs[Math.floor(Math.random() * dirs.length)]);\n        else return $25435e71e18ef34b$var$Action.Move(1 + Math.floor(Math.random() * 4));\n    }\n    addItemToMemory(world, x, y, now) {\n        if (world.get(x, y) != null) this.memory.push($25435e71e18ef34b$var$Memory.Location($25435e71e18ef34b$var$Noun.Thing({\n            conditions: [\n                {\n                    type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                    data: world.get(x, y).item.id\n                }\n            ]\n        }), x, y, now));\n    }\n    tryToDrop(world, indices, now) {\n        this.short[\"justDropped\"] = true;\n        for(let i = 0; i < indices.length; i += 1)if (world.get(indices[i].x, indices[i].y) == null) {\n            this.nextAction = $25435e71e18ef34b$var$Action.Interact(i);\n            this.memory.push($25435e71e18ef34b$var$Memory.Location($25435e71e18ef34b$var$Noun.Thing({\n                conditions: [\n                    {\n                        type: (0, $53f3621204de4d76$export$1f4e9867ac5b0621).Is,\n                        data: this.holding.item.id\n                    }\n                ]\n            }), indices[i].x, indices[i].y, now));\n            return true;\n        }\n        this.nextAction = this.moveRandomly(world, indices);\n        return false;\n    }\n    nearestItem(world, selector) {\n        const items = world.filter(({ item: item })=>item != null && (0, $53f3621204de4d76$export$1015978009c33b96).matches(selector, item.item));\n        if (items.length === 0) return null;\n        return items.sort((a, b)=>{\n            const aDist = (a.x - this.x) ** 2 + (a.y - this.y) ** 2;\n            const bDist = (b.x - this.x) ** 2 + (b.y - this.y) ** 2;\n            return aDist - bDist;\n        })[0];\n    }\n    nearestItemWithoutNearbyPerson(world, selector, people) {\n        const items = world.filter(({ item: item })=>item != null && (0, $53f3621204de4d76$export$1015978009c33b96).matches(selector, item.item));\n        if (items.length === 0) return null;\n        const peopleDist = items.map(({ x: x, y: y })=>people.reduce((a, b)=>Math.min(a, (b.x - x) ** 2 + (b.y - y) ** 2), Infinity));\n        return items.sort((a, b)=>{\n            const aDist = ((a.x - this.x) ** 2 + (a.y - this.y) ** 2) / (peopleDist[items.indexOf(a)] + 1);\n            const bDist = ((b.x - this.x) ** 2 + (b.y - this.y) ** 2) / (peopleDist[items.indexOf(b)] + 1);\n            return aDist - bDist;\n        })[0];\n    }\n    completeAltObjective(index) {\n        const marked = new Set();\n        const queue = [\n            index\n        ];\n        const map = this.objectives.map((obj)=>obj.type === \"obtain\" ? obj.data.noun : null);\n        this.short[\"goto\"] = null;\n        this.short[\"path\"] = null;\n        while(queue.length > 0){\n            const current = queue.pop();\n            marked.add(current);\n            if (this.objectives[current].type === \"obtain\") this.objectives[current].data.children.forEach((child)=>{\n                if (!marked.has(child)) queue.push(child);\n            });\n        }\n        this.objectives = this.objectives.filter((_, i)=>!marked.has(i));\n        this.objectives.forEach((objective)=>{\n            if (objective.type === \"obtain\") objective.data.children = objective.data.children.filter((child)=>!marked.has(child)).map((child)=>this.objectives.findIndex((obj)=>obj.data.noun === map[child]));\n        });\n    }\n    /*\r\n    computePath(world: World, x: number, y: number, obstacles: {x: number, y: number}[] = []): { [key: number]: Direction } | null {\r\n        // A* pathfinding, cannot move through items tagged 'blocking'\r\n        // returns a map of which index we're at and which direction to move from there.\r\n\r\n        const heuristic = (index: number) => {\r\n            const dx = index % WORLD_SIZE - x;\r\n            const dy = Math.floor(index / WORLD_SIZE) - y;\r\n            return Math.sqrt(dx ** 2 + dy ** 2);\r\n        }\r\n\r\n        const obstaclesSet = new Set(obstacles.map(({ x, y }) => y * WORLD_SIZE + x));\r\n\r\n        const start = this.index();\r\n        const end = Math.min(Math.max(y, 0), WORLD_SIZE - 1) * WORLD_SIZE + Math.min(Math.max(x, 0), WORLD_SIZE - 1);\r\n\r\n        if (start === end) {\r\n            return {};\r\n        }\r\n        if (obstaclesSet.has(end)) {\r\n            return null;\r\n        }\r\n\r\n        const open: number[] = [start];\r\n        const closed = new Set<number>();\r\n\r\n        const cost: { [key: number]: number } = {};\r\n        const parent: { [key: number]: number | null } = {};\r\n\r\n        cost[start] = 0;\r\n        parent[start] = null;\r\n\r\n        let i = 0;\r\n        while (open.length > 0) {\r\n            const current = open.reduce((a, b) => cost[a] ?? 0 + heuristic(a) < cost[b] ?? 0 + heuristic(b) ? a : b, open[0]);\r\n            if (current === end) {\r\n                break;\r\n            }\r\n            \r\n            open.splice(open.indexOf(current), 1);\r\n            closed.add(current);\r\n\r\n            const neighbors = [\r\n                current - WORLD_SIZE,\r\n                current - 1,\r\n                current + 1,\r\n                current + WORLD_SIZE,\r\n            ];\r\n\r\n            for (const neighbor of neighbors) {\r\n                const nx = neighbor % WORLD_SIZE;\r\n                const ny = Math.floor(neighbor / WORLD_SIZE);\r\n                if (nx < 0 || ny < 0 || nx >= WORLD_SIZE || ny >= WORLD_SIZE) {\r\n                    continue;\r\n                }\r\n                if (closed.has(neighbor)) {\r\n                    continue;\r\n                }\r\n                if (obstaclesSet.has(neighbor)) {\r\n                    continue;\r\n                }\r\n                if (world[neighbor] != null && world[neighbor]!.item.tags.includes('blocking')) {\r\n                    continue;\r\n                }\r\n                const newCost = cost[current] + 1;\r\n                if (!open.includes(neighbor)) {\r\n                    open.push(neighbor);\r\n                } else if (newCost >= cost[neighbor]) {\r\n                    continue;\r\n                }\r\n                cost[neighbor] = newCost;\r\n                parent[neighbor] = current;\r\n            }\r\n\r\n            i += 1;\r\n            if (i > 10000) {\r\n                console.log('search exceeded 10000 node limit');\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (open.length === 0) {\r\n            console.log('ran out of nodes?', i);\r\n        }\r\n        \r\n        if (parent[end] == null) {\r\n            console.log('no path found', this.x, this.y, x, y);\r\n            return null;\r\n        }\r\n\r\n        const path: { [key: number]: Direction } = {};\r\n        let current = end;\r\n        while (current !== start) {\r\n            const next = parent[current]!;\r\n            if (next === current - WORLD_SIZE) {\r\n                path[next] = Direction.Down;\r\n            } else if (next === current - 1) {\r\n                path[next] = Direction.Right;\r\n            } else if (next === current + 1) {\r\n                path[next] = Direction.Left;\r\n            } else if (next === current + WORLD_SIZE) {\r\n                path[next] = Direction.Up;\r\n            }\r\n            current = next;\r\n        }\r\n        return path;\r\n    } */ locationMemory(item) {\n        return this.memory.find((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(memory.data.noun.data.selector, item));\n    }\n    whereIsItem(item) {\n        const memory = this.memory.find((memory)=>memory.type === \"location\" && memory.data.noun.type === \"thing\" && (0, $53f3621204de4d76$export$1015978009c33b96).matches(item, (0, $53f3621204de4d76$export$21cc2ed387caee94).getItem((0, $53f3621204de4d76$export$21cc2ed387caee94).query(memory.data.noun.data.selector)[0] || 0)));\n        if (memory == null) return null;\n        return memory.data;\n    }\n    completeObjective() {\n        const lastIndex = this.objectives.length - 1;\n        this.objectives.forEach((objective)=>{\n            if (objective.type === \"obtain\") objective.data.children = objective.data.children.filter((child)=>child !== lastIndex);\n        });\n        this.objectives.pop();\n        this.short = {};\n    }\n    addObjective(objective, parent) {\n        if (parent != null && parent.type === \"obtain\" && objective.type === \"obtain\") parent.data.children.push(this.objectives.length);\n        this.objectives.push(objective);\n        this.short = {};\n    }\n    act() {\n        if (this.nextAction != null) return this.nextAction;\n        else return $25435e71e18ef34b$var$Action.Nothing();\n    }\n    outerIndex() {\n        return Math.floor(this.y / $25435e71e18ef34b$export$c1abb8bab1e615cd) * $25435e71e18ef34b$export$7714bc4c41155738 + Math.floor(this.x / $25435e71e18ef34b$export$c1abb8bab1e615cd);\n    }\n    innerIndex() {\n        return this.y % $25435e71e18ef34b$export$c1abb8bab1e615cd * $25435e71e18ef34b$export$c1abb8bab1e615cd + this.x % $25435e71e18ef34b$export$c1abb8bab1e615cd;\n    }\n}\nfunction $25435e71e18ef34b$export$5d84c5ff06f774b1(now, world) {\n    const surname = $25435e71e18ef34b$export$5d832d6580b26c5();\n    const size = Math.round(Math.random() * 4 + 2);\n    const x = Math.round(Math.random() * world.size);\n    const y = Math.round(Math.random() * world.size);\n    const group = [];\n    const takenPositions = [];\n    for(let i = 0; i < size; i += 1){\n        const name = $25435e71e18ef34b$export$5d832d6580b26c5();\n        let px = x;\n        let py = y;\n        while(takenPositions.find(([tx, ty])=>tx === px && ty === py) || world.get(px, py) != null){\n            px = Math.min(Math.max(x + Math.round(Math.random() * 20 - 10), 0), world.size - 1);\n            py = Math.min(Math.max(y + Math.round(Math.random() * 20 - 10), 0), world.size - 1);\n        }\n        takenPositions.push([\n            px,\n            py\n        ]);\n        group.push(new $25435e71e18ef34b$export$2e2bcd8739ae039($25435e71e18ef34b$export$567fc7097e064344(), name, surname, now, px, py));\n    }\n    for (const person of group)for (const other of group){\n        if (person === other) continue;\n        person.reputations[other.id] = 100;\n        person.memory.push($25435e71e18ef34b$var$Memory.Exists($25435e71e18ef34b$var$Noun.Person(other.id), now));\n        person.health = 80 + Math.random() * 20;\n        person.home = {\n            x: x,\n            y: y\n        };\n    }\n    return group;\n}\nfunction $25435e71e18ef34b$export$a0ae4e7d1f7ff4b1(people) {\n    for (const person of people)for (const other of people){\n        if (person === other) continue;\n        if (person.reputations[other.id] === undefined) person.reputations[other.id] = 0;\n        if (person.female() != other.female()) person.reputations[other.id] += 50;\n        person.reputations[other.id] += Math.round(Math.random() * 20 - 10);\n    }\n}\n\n\nfor(const key in $53f3621204de4d76$exports)if ($53f3621204de4d76$exports.hasOwnProperty(key)) window[key] = $53f3621204de4d76$exports[key];\nfor(const key in $25435e71e18ef34b$exports)if ($25435e71e18ef34b$exports.hasOwnProperty(key)) window[key] = $25435e71e18ef34b$exports[key];\n\n\n//# sourceMappingURL=index.b8f9d50a.js.map\n","import * as lib from './lib';\r\n\r\nfor (const key in lib) {\r\n  if (lib.hasOwnProperty(key)) {\r\n    window[key] = lib[key];\r\n  }\r\n}\r\n\r\nimport * as sim from './sim';\r\n\r\nfor (const key in sim) {\r\n  if (sim.hasOwnProperty(key)) {\r\n    window[key] = sim[key];\r\n  }\r\n}","import itemsData from './items.json';\r\nimport recipesData from './recipes.json';\r\n\r\ninterface ItemDisplay {\r\n    character: number;\r\n    color: number;\r\n}\r\n\r\nexport class Item {\r\n    id: number;\r\n    name: string;\r\n    tags: string[];\r\n    display: ItemDisplay[];\r\n    properties: { [key: string]: number } = {};\r\n\r\n    static DEFAULT_ITEM = new Item(0, '', [], [{ character: 0, color: 0 }]);\r\n\r\n    constructor(id: number, name: string, tags: string[], display: ItemDisplay[], properties: { [key: string]: number } = {}) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.tags = tags;\r\n        this.display = display;\r\n        this.properties = properties;\r\n    }\r\n\r\n    get usedIn(): Recipe[] {\r\n        return ((REGISTRY && REGISTRY.uses.get(this.id)?.map((id) => REGISTRY.getRecipe(id))) || []).filter((recipe, i, a) => a.indexOf(recipe) === i);\r\n    }\r\n\r\n    get resultedBy(): Recipe[] {\r\n        return ((REGISTRY && REGISTRY.results.get(this.id)?.map((id) => REGISTRY.getRecipe(id))) || []).filter((recipe, i, a) => a.indexOf(recipe) === i);\r\n    }\r\n\r\n    get active(): boolean {\r\n        return this.usedIn.some((recipe) => recipe.time);\r\n    }\r\n\r\n    get root(): boolean {\r\n        return this.tags.includes('root') || this.tags.includes('natural') || this.resultedBy.length === 0;\r\n    }\r\n    \r\n    depth(): number {\r\n        return REGISTRY.depths.get(this.id) || 0;\r\n    }\r\n\r\n    resources(): Item[] {\r\n        return [];\r\n    }\r\n\r\n    required(has: number[] = [], seen: Set<number> = new Set()): number {\r\n        if (has.includes(this.id) || seen.has(this.id)) {\r\n            return 0;\r\n        }\r\n        seen.add(this.id);\r\n        if (this.root) {\r\n            return 1;\r\n        }\r\n        return this.resultedBy.reduce((acc, recipe) => acc + recipe.used().reduce((acc, item) => acc + REGISTRY.getItem(item).required(has, seen), 0), 0);\r\n    }\r\n    \r\n    // recursive\r\n    isNeededToMake(item: Item): boolean {\r\n        if (this.id === item.id) {\r\n            return true;\r\n        }\r\n        if (this.root) {\r\n            return false;\r\n        }\r\n        return this.resultedBy.some((recipe) => REGISTRY.getItem(recipe.getAnOrigin()).isNeededToMake(item) || (recipe.actor && REGISTRY.getItem(recipe.getAnActor()).isNeededToMake(item)));\r\n    }\r\n\r\n}\r\n\r\nexport class ItemState {\r\n    id: number;\r\n    value: number = 0;\r\n    time: number = 0;\r\n    inside?: ItemState[];\r\n    \r\n    constructor(id: number) {\r\n        this.id = id;\r\n    }\r\n\r\n    get item(): Item {\r\n        return REGISTRY.getItem(this.id);\r\n    }\r\n\r\n    clone(): ItemState {\r\n        let clone = new ItemState(this.id);\r\n        clone.value = this.value;\r\n        clone.time = this.time;\r\n        return clone;\r\n    }\r\n}\r\n\r\nexport enum ItemConditionTypes {\r\n    None = '',\r\n    All = 'All',\r\n    Is = 'Is',\r\n    IsNot = 'IsNot',\r\n    WithTag = 'WithTag',\r\n    WithoutTag = 'WithoutTag',\r\n    PropertyIs = 'PropertyIs',\r\n    PropertyIsNot = 'PropertyIsNot',\r\n};\r\n\r\nfunction cmp(inp: number, op: string, ref: number): boolean {\r\n    switch (op) {\r\n        case '=':\r\n            return inp === ref;\r\n        case '>':\r\n            return inp > ref;\r\n        case '<':\r\n            return inp < ref;\r\n        case '>=':\r\n            return inp >= ref;\r\n        case '<=':\r\n            return inp <= ref;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n\r\nexport class ItemCondition {\r\n    type: ItemConditionTypes;\r\n    data: any;\r\n\r\n    static matches(item: Item, condition: ItemCondition): boolean {\r\n        switch (condition.type) {\r\n            case ItemConditionTypes.All:\r\n                return true;\r\n            case ItemConditionTypes.Is:\r\n                return item.id === condition.data;\r\n            case ItemConditionTypes.IsNot:\r\n                return item.id !== condition.data;\r\n            case ItemConditionTypes.WithTag:\r\n                return item.tags.indexOf(condition.data) > -1;\r\n            case ItemConditionTypes.WithoutTag:\r\n                return item.tags.indexOf(condition.data) === -1;\r\n            case ItemConditionTypes.PropertyIs:\r\n                return cmp(item.properties[condition.data.property], condition.data.op, condition.data.ref);\r\n            case ItemConditionTypes.PropertyIsNot:\r\n                return !cmp(item.properties[condition.data.property], condition.data.op, condition.data.ref);\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ItemConditions {\r\n    conditions: ItemCondition[];\r\n    \r\n    static matches(condition: ItemConditions, item: Item): boolean {\r\n        return condition.conditions.every((c) => ItemCondition.matches(item, c));\r\n    }\r\n}\r\n\r\nenum RecipeResultType {\r\n    None = '',\r\n    SameItem = 'SameItem',\r\n    NewItem = 'NewItem',\r\n}\r\n\r\ntype RecipeResult = { type: RecipeResultType, data: any };\r\ntype RecipeResults = { origin: RecipeResult, actor?: RecipeResult, chance?: number }[];\r\nexport class Recipe {\r\n    id: number;\r\n    origin: ItemConditions;\r\n    originValue?: { op: string, ref: number };\r\n    time?: number;\r\n\r\n    actor?: ItemConditions;\r\n    actorValue?: { op: string, ref: number };\r\n\r\n    results: RecipeResults = [];\r\n\r\n    constructor(id: number, origin: ItemConditions, results: RecipeResults, options: Partial<Recipe>) {\r\n        this.id = id;\r\n        this.origin = origin;\r\n        this.results = results;\r\n        this.originValue = options.originValue;\r\n        this.time = options.time;\r\n        this.actor = options.actor;\r\n    }\r\n\r\n    willOccur(origin: ItemState, actor: ItemState | null, now: number) {\r\n        return ItemConditions.matches(this.origin, origin.item) && (\r\n            (!this.originValue || cmp(origin.value, this.originValue.op, this.originValue.ref))\r\n            && (!this.time || now - origin.time >= this.time) \r\n            && (!this.actor || (actor && (\r\n                ItemConditions.matches(this.actor, actor.item)\r\n                && (!this.actorValue || cmp(actor.value, this.actorValue.op, this.actorValue.ref))\r\n            )))\r\n        );\r\n    }\r\n\r\n    static getRandomResult(results: RecipeResults, random: number): { origin: RecipeResult, actor?: RecipeResult } {\r\n        if (results.length === 0) {\r\n            return { origin: { type: RecipeResultType.None, data: null } };\r\n        }\r\n        if (results.length === 1) {\r\n            return results[0];\r\n        }\r\n        let total = 0;\r\n        for (let i = 0; i < results.length; i++) {\r\n            total += results[i].chance || 1;\r\n        }\r\n        let r = 0;\r\n        for (let i = 0; i < results.length; i++) {\r\n            r += (results[i].chance || 1) / total;\r\n            if (r >= random) {\r\n                return results[i];\r\n            }\r\n        }\r\n        return results[0];\r\n    }\r\n\r\n    origins(): number[] {\r\n        return (REGISTRY && REGISTRY.query(this.origin)) || [];\r\n    }\r\n\r\n    actors(): number[] {\r\n        return (REGISTRY && REGISTRY.query(this.actor || { conditions: [{ type: ItemConditionTypes.None, data: null }] })) || [];\r\n    }\r\n\r\n    used(): number[] {\r\n        return [...this.origins(), ...this.actors()];\r\n    }\r\n\r\n    simpleUsed(): number[] {\r\n        return [...(this.getAnOrigin() === 0 ? [] : [ this.getAnOrigin() ]), ...(this.getAnActor() === 0 ? [] : [ this.getAnActor() ])];\r\n    }\r\n\r\n    resulted(): number[] {\r\n        const resulted: number[] = [];\r\n        for (const result of this.results) {\r\n            if (result.origin.type === RecipeResultType.NewItem) {\r\n                resulted.push(result.origin.data);\r\n            } else if (result.origin.type === RecipeResultType.SameItem) {\r\n                resulted.push(...this.origins());\r\n            }\r\n            if (result.actor) {\r\n                if (result.actor.type === RecipeResultType.NewItem) {\r\n                    resulted.push(result.actor.data);\r\n                } else if (result.actor.type === RecipeResultType.SameItem) {\r\n                    resulted.push(...this.actors());\r\n                }\r\n            }\r\n        }\r\n        // remove duplicates\r\n        return resulted.filter((v, i, a) => a.indexOf(v) === i);\r\n    }\r\n\r\n    notableResulted(): number[] {\r\n        const resulted: number[] = [];\r\n        for (const result of this.results) {\r\n            if (result.origin.type === RecipeResultType.NewItem) {\r\n                resulted.push(result.origin.data);\r\n            }\r\n            if (result.actor) {\r\n                if (result.actor.type === RecipeResultType.NewItem) {\r\n                    resulted.push(result.actor.data);\r\n                }\r\n            }\r\n        }\r\n        // remove duplicates\r\n        return resulted.filter((v, i, a) => a.indexOf(v) === i);\r\n    }\r\n\r\n    getAnOrigin(): number {\r\n        return this.origins()[0] || 0;\r\n    }\r\n\r\n    getAnActor(): number {\r\n        return this.actor ? this.actors()[0] || 0 : 0;\r\n    }\r\n\r\n    static getResult(item: ItemState, result: RecipeResult) {\r\n        let newItem: ItemState | null = null;\r\n        switch (result.type) {\r\n            case RecipeResultType.SameItem:\r\n                newItem = item.clone();\r\n                if (result.data) {\r\n                    switch (result.data.op) {\r\n                        case '=':\r\n                            newItem.value = result.data.ref;\r\n                            break;\r\n                        case '+':\r\n                            newItem.value += result.data.ref;\r\n                            break;\r\n                        case '-':\r\n                            newItem.value -= result.data.ref;\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n            case RecipeResultType.NewItem:\r\n                newItem = new ItemState(result.data);\r\n                break;\r\n        }\r\n        return newItem;\r\n    }\r\n\r\n    static getOptionalResult(item: ItemState | null | undefined, result: RecipeResult) {\r\n        let newItem: ItemState | null = null;\r\n        switch (result.type) {\r\n            case RecipeResultType.SameItem:\r\n                if (!item) {\r\n                    return null;\r\n                }\r\n                console.log(item);\r\n                newItem = item.clone();\r\n                if (result.data) {\r\n                    switch (result.data.op) {\r\n                        case '=':\r\n                            newItem.value = result.data.ref;\r\n                            break;\r\n                        case '+':\r\n                            newItem.value += result.data.ref;\r\n                            break;\r\n                        case '-':\r\n                            newItem.value -= result.data.ref;\r\n                            break;\r\n                    }\r\n                }\r\n                break;\r\n            case RecipeResultType.NewItem:\r\n                newItem = new ItemState(result.data);\r\n                break;\r\n        }\r\n        return newItem;\r\n    }\r\n\r\n    getResults(origin: ItemState, actor?: ItemState, random?: number): [ItemState | null, ItemState | null] {\r\n        if (this.results.length === 0) {\r\n            return [null, null];\r\n        }\r\n        const result = !random ? this.results[0] : Recipe.getRandomResult(this.results, random);\r\n        let originResult: ItemState | null = Recipe.getResult(origin, result.origin);\r\n        let actorResult: ItemState | null = result.actor ? Recipe.getOptionalResult(actor, result.actor) : null;\r\n        return [originResult, actorResult];\r\n    }\r\n\r\n}\r\n\r\nclass Registry {\r\n    public items: Item[] = [];\r\n    public depths: Map<number, number> = new Map();\r\n\r\n    public recipes: Recipe[] = [];\r\n    public uses: Map<number, number[]> = new Map();\r\n    public results: Map<number, number[]> = new Map();\r\n\r\n    constructor() {\r\n        this.items = [];\r\n        this.recipes = [];\r\n    }\r\n\r\n    setItems(itemsData: any[]) {\r\n        itemsData = [Item.DEFAULT_ITEM, ...itemsData];\r\n        itemsData.forEach((itemData) => {\r\n            const id = this.items.length;\r\n            this.items.push(new Item(id, itemData.name, itemData.tags, itemData.display, itemData.properties));\r\n        });\r\n    }\r\n\r\n    setRecipes(recipesData: any[]) {\r\n        recipesData.forEach((recipeData) => {\r\n            const id = this.recipes.length;\r\n            this.recipes.push(new Recipe(id, recipeData.origin, recipeData.results, recipeData));\r\n        });\r\n    }\r\n\r\n    refresh() {\r\n        this.recipes.forEach((_, i) => {\r\n            this.recipes[i].used().forEach((id) => {\r\n                if (!this.uses.has(id)) {\r\n                    this.uses.set(id, []);\r\n                }\r\n                this.uses.get(id)?.push(i);\r\n            });\r\n            this.recipes[i].notableResulted().forEach((id) => {\r\n                if (!this.results.has(id)) {\r\n                    this.results.set(id, []);\r\n                }\r\n                this.results.get(id)?.push(i);\r\n            });\r\n        });\r\n        \r\n        for (const item of this.items) {\r\n            if (item.root) {\r\n                this.depths.set(item.id, 0);\r\n            }\r\n        }\r\n\r\n        let changed = true;\r\n        while (changed) {\r\n            changed = false;\r\n            for (const item of this.items) {\r\n                if (item.root || this.depths.has(item.id)) {\r\n                    continue;\r\n                }\r\n                const recipes = item.resultedBy.filter((recipe) => recipe.used().every((result) => this.depths.has(result)));\r\n                if (recipes.length === 0) {\r\n                    continue;\r\n                }\r\n                const depth = Math.max(...recipes.map((recipe) => Math.max(...recipe.used().map((result) => this.depths.get(result) || 0)))) + 1;\r\n                this.depths.set(item.id, depth);\r\n                changed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    query(condition: ItemConditions): number[] {\r\n        let results: number[] = [];\r\n        this.items.forEach((item) => {\r\n            if (ItemConditions.matches(condition, item)) {\r\n                results.push(item.id);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n\r\n    itemsData(): string {\r\n        return JSON.stringify(this.items.map((item) => ({ ...item, id: undefined })));\r\n    }\r\n\r\n    recipesData(): string {\r\n        return JSON.stringify(this.recipes.map((recipe) => ({ ...recipe, id: undefined })));\r\n    }\r\n\r\n    get itemCount(): number {\r\n        return this.items.length;\r\n    }\r\n\r\n    public getItem(id: number): Item {\r\n        return this.items[id] || Item.DEFAULT_ITEM;\r\n    }\r\n\r\n    public getRecipe(id: number): Recipe {\r\n        return this.recipes[id];\r\n    }\r\n}\r\n\r\nexport const REGISTRY = new Registry();\r\nREGISTRY.setItems(itemsData);\r\nREGISTRY.setRecipes(recipesData);\r\nREGISTRY.refresh();\r\n\r\nexport const refreshRegistry = () => {\r\n    REGISTRY.setItems(JSON.parse(REGISTRY.itemsData()));\r\n    REGISTRY.setRecipes(JSON.parse(REGISTRY.recipesData()));\r\n    REGISTRY.refresh();\r\n}","[\r\n    {\"properties\":{},\"name\":\"Water\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":247,\"color\":41}]},\r\n    {\"properties\":{},\"name\":\"Ice\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":178,\"color\":43}]},\r\n    {\"properties\":{},\"name\":\"Red Cedar Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":5,\"color\":26}]},\r\n    {\"properties\":{\"weight\":10},\"name\":\"Douglas Fir Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":6,\"color\":37}]},\r\n    {\"properties\":{\"weight\":10},\"name\":\"Mountain Maple Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":5,\"color\":35}]},\r\n    {\"properties\":{},\"name\":\"Western Juniper Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":20,\"color\":29}]},\r\n    {\"properties\":{},\"name\":\"Large Boulder\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":30,\"color\":5}]},\r\n    {\"properties\":{},\"name\":\"Willow Tree\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":158,\"color\":34}]},\r\n    {\"properties\":{\"weight\":5},\"name\":\"Flint Deposit\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":111,\"color\":9}]},\r\n    {\"properties\":{\"weight\":20},\"name\":\"Fertile Soil\",\"tags\":[\"natural\",\"static\"],\"display\":[{\"character\":30,\"color\":20}]},\r\n    {\"properties\":{\"weight\":10},\"name\":\"Clay Deposit\",\"tags\":[\"natural\",\"static\"],\"display\":[{\"character\":30,\"color\":27}]},\r\n    {\"properties\":{},\"name\":\"Snow Bank\",\"tags\":[\"natural\",\"blocking\",\"static\"],\"display\":[{\"character\":30,\"color\":8}]},\r\n    {\"properties\":{\"weight\":10},\"name\":\"Stone\",\"tags\":[\"natural\"],\"display\":[{\"character\":7,\"color\":5}]},\r\n    {\"properties\":{},\"name\":\"Flint Deposit with Chip\",\"tags\":[\"static\"],\"display\":[{\"character\":149,\"color\":9}]},\r\n    {\"properties\":{\"damage\":1},\"name\":\"Flint Chip\",\"tags\":[\"weapon\",\"tool\",\"knifelike\",\"important\"],\"display\":[{\"character\":47,\"color\":9}]},\r\n    {\"properties\":{},\"name\":\"Large Branch\",\"tags\":[],\"display\":[{\"character\":244,\"color\":20}]},\r\n    {\"properties\":{},\"name\":\"Shaft\",\"tags\":[],\"display\":[{\"character\":179,\"color\":20}]},\r\n    {\"properties\":{},\"name\":\"Stick\",\"tags\":[],\"display\":[{\"character\":45,\"color\":20}]},\r\n    {\"properties\":{\"weight\":50},\"name\":\"Ryegrass\",\"tags\":[\"natural\",\"static\"],\"display\":[{\"character\":35,\"color\":32}]},\r\n    {\"properties\":{\"weight\":20},\"name\":\"Cat Tail\",\"tags\":[\"natural\",\"foodSource\",\"static\"],\"display\":[{\"character\":244,\"color\":34}]},\r\n    {\"properties\":{},\"name\":\"Cat Tail Stalk\",\"tags\":[],\"display\":[{\"character\":47,\"color\":34}]},\r\n    {\"properties\":{\"food\":10},\"name\":\"Cat Tail Head\",\"tags\":[\"edible\"],\"display\":[{\"character\":45,\"color\":27}]},\r\n    {\"properties\":{},\"name\":\"Cordage Rope\",\"tags\":[],\"display\":[{\"character\":21,\"color\":24}]},\r\n    {\"properties\":{},\"name\":\"Cordage Thread\",\"tags\":[],\"display\":[{\"character\":21,\"color\":22}]},\r\n    {\"properties\":{},\"name\":\"Tied Stick\",\"tags\":[],\"display\":[{\"character\":45,\"color\":20},{\"character\":21,\"color\":24}]},\r\n    {\"properties\":{\"weight\":5},\"name\":\"Flat Rock\",\"tags\":[\"natural\"],\"display\":[{\"character\":95,\"color\":7}]},\r\n    {\"properties\":{\"weight\":5},\"name\":\"Full Blackberry Bush\",\"tags\":[\"natural\",\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49}]},\r\n    {\"properties\":{\"food\":5},\"name\":\"Blackberry\",\"tags\":[\"edible\"],\"display\":[{\"character\":249,\"color\":49}]},\r\n    {\"properties\":{},\"name\":\"Blackberry Bush with 5 Berries\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":53,\"color\":49}]},\r\n    {\"properties\":{},\"name\":\"Blackberry Bush with 4 Berries\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":52,\"color\":49}]},\r\n    {\"properties\":{},\"name\":\"Blackberry Bush with 3 Berries\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":51,\"color\":49}]},\r\n    {\"properties\":{},\"name\":\"Blackberry Bush with 2 Berries\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":50,\"color\":49}]},\r\n    {\"properties\":{},\"name\":\"Blackberry Bush with 1 Berry\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":42,\"color\":49},{\"character\":49,\"color\":49}]},\r\n    {\"properties\":{},\"name\":\"Empty Blackberry Bush\",\"tags\":[\"static\"],\"display\":[{\"character\":42,\"color\":53}]},\r\n    {\"properties\":{\"damage\":3},\"name\":\"Flint Hatchet\",\"tags\":[\"weapon\",\"tool\",\"hatchetlike\",\"important\"],\"display\":[{\"character\":173,\"color\":9}]},\r\n    {\"properties\":{\"weight\":10},\"name\":\"Stinging Nettle\",\"tags\":[\"natural\"],\"display\":[{\"character\":235,\"color\":34}]},\r\n    {\"properties\":{},\"name\":\"Blackberry Seed\",\"tags\":[\"seed\"],\"display\":[{\"character\":249,\"color\":53}]},\r\n    {\"properties\":{},\"name\":\"Fertile Plot\",\"tags\":[\"static\"],\"display\":[{\"character\":240,\"color\":20}]},\r\n    {\"properties\":{},\"name\":\"Seeded Blackberry Bush\",\"tags\":[\"static\"],\"display\":[{\"character\":240,\"color\":20},{\"character\":249,\"color\":53}]},\r\n    {\"properties\":{},\"name\":\"Watered Blackberry Bush\",\"tags\":[\"static\"],\"display\":[{\"character\":240,\"color\":20},{\"character\":236,\"color\":55}]},\r\n    {\"properties\":{\"food\":10},\"name\":\"Wild Potato\",\"tags\":[\"edible\",\"natural\"],\"display\":[{\"character\":7,\"color\":21}]},\r\n    {\"properties\":{\"food\":10},\"name\":\"Wild Carrot\",\"tags\":[\"edible\",\"natural\"],\"display\":[{\"character\":25,\"color\":29}]},\r\n    {\"properties\":{\"food\":10},\"name\":\"Wild Onion\",\"tags\":[\"edible\",\"natural\"],\"display\":[{\"character\":162,\"color\":33}]},\r\n    {\"properties\":{},\"name\":\"Fertile Soil Clump\",\"tags\":[],\"display\":[{\"character\":7,\"color\":20}]},\r\n    {\"properties\":{},\"name\":\"Clay Ball\",\"tags\":[],\"display\":[{\"character\":7,\"color\":27}]},\r\n    {\"properties\":{\"food\":15},\"name\":\"Chanterelle\",\"tags\":[\"edible\",\"natural\"],\"display\":[{\"character\":24,\"color\":32}]},\r\n    {\"properties\":{\"weight\":5},\"name\":\"Full Rose Hip Bush\",\"tags\":[\"foodSource\",\"static\",\"natural\"],\"display\":[{\"character\":128,\"color\":60}]},\r\n    {\"properties\":{\"food\":5},\"name\":\"Rose Hip\",\"tags\":[\"edible\"],\"display\":[{\"character\":46,\"color\":60}]},\r\n    {\"properties\":{},\"name\":\"Rose Hip Bush with 2 Hips\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":128,\"color\":60},{\"character\":50,\"color\":60}]},\r\n    {\"properties\":{},\"name\":\"Rose Hip Bush with 1 Hip\",\"tags\":[\"foodSource\",\"static\"],\"display\":[{\"character\":128,\"color\":60},{\"character\":49,\"color\":60}]},\r\n    {\"properties\":{},\"name\":\"Empty Rose Hip Bush\",\"tags\":[],\"display\":[{\"character\":128,\"color\":62}]},\r\n    {\"properties\":{},\"name\":\"Kindling\",\"tags\":[],\"display\":[{\"character\":37,\"color\":20}]},\r\n    {\"properties\":{},\"name\":\"Curved Branch\",\"tags\":[],\"display\":[{\"character\":40,\"color\":20}]},\r\n    {\"properties\":{},\"name\":\"Split Shaft\",\"tags\":[],\"display\":[{\"character\":179,\"color\":21}]},\r\n    {\"properties\":{},\"name\":\"Split Shaft with Notch\",\"tags\":[],\"display\":[{\"character\":124,\"color\":21}]},\r\n    {\"properties\":{},\"name\":\"Fire Starting Kit\",\"tags\":[\"important\"],\"display\":[{\"character\":29,\"color\":21}]},\r\n    {\"properties\":{\"heat\":20},\"name\":\"Fire\",\"tags\":[\"static\",\"heatSource\",\"important\"],\"display\":[{\"character\":127,\"color\":0},{\"character\":127,\"color\":28},{\"character\":127,\"color\":0},{\"character\":127,\"color\":31}]},\r\n    {\"properties\":{\"heat\":12},\"name\":\"Fire Embers\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":15,\"color\":0},{\"character\":15,\"color\":0},{\"character\":15,\"color\":28},{\"character\":15,\"color\":28}]},\r\n    {\"properties\":{\"heat\":4},\"name\":\"Ignited Kit\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":42,\"color\":0},{\"character\":42,\"color\":28}]},\r\n    {\"properties\":{},\"name\":\"Charcoal\",\"tags\":[\"static\"],\"display\":[{\"character\":236,\"color\":5}]},\r\n    {\"properties\":{},\"name\":\"Bow\",\"tags\":[\"tool\",\"important\"],\"display\":[{\"character\":123,\"color\":20}]},\r\n    {\"properties\":{},\"name\":\"Bow Drill\",\"tags\":[\"important\"],\"display\":[{\"character\":123,\"color\":20},{\"character\":45,\"color\":20}]},\r\n    {\"properties\":{},\"name\":\"Curved Shaft\",\"tags\":[],\"display\":[{\"character\":60,\"color\":20}]},\r\n    {\"properties\":{\"food\":10},\"name\":\"Tinder\",\"tags\":[],\"display\":[{\"character\":42,\"color\":27}]},\r\n    {\"properties\":{},\"name\":\"Red Cedar Tree with Tinder\",\"tags\":[\"static\"],\"display\":[{\"character\":5,\"color\":26},{\"character\":42,\"color\":27}]},\r\n    {\"properties\":{},\"name\":\"Clay Deposit with 3 Balls\",\"tags\":[\"static\"],\"display\":[{\"character\":30,\"color\":27},{\"character\":51,\"color\":27}]},\r\n    {\"properties\":{},\"name\":\"Clay Deposit with 2 Balls\",\"tags\":[\"static\"],\"display\":[{\"character\":30,\"color\":27},{\"character\":50,\"color\":27}]},\r\n    {\"properties\":{},\"name\":\"Clay Deposit with 1 Ball\",\"tags\":[\"static\"],\"display\":[{\"character\":30,\"color\":27},{\"character\":49,\"color\":27}]},\r\n    {\"properties\":{},\"name\":\"Rye Grain\",\"tags\":[],\"display\":[{\"character\":37,\"color\":32}]},\r\n    {\"properties\":{},\"name\":\"Straw\",\"tags\":[],\"display\":[{\"character\":186,\"color\":32}]},\r\n    {\"properties\":{\"size\":3},\"name\":\"Straw Basket\",\"tags\":[\"container\",\"important\"],\"display\":[{\"character\":118,\"color\":32}]},\r\n    {\"properties\":{},\"name\":\"Wet Clay Bowl\",\"tags\":[],\"display\":[{\"character\":118,\"color\":27}]},\r\n    {\"properties\":{},\"name\":\"Clay Bowl\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22}]},\r\n    {\"properties\":{},\"name\":\"Clay Bowl with Water\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":41}]},\r\n    {\"properties\":{},\"name\":\"Harvested Mountain Maple Tree\",\"tags\":[\"static\"],\"display\":[{\"character\":5,\"color\":35},{\"character\":0,\"color\":1}]},\r\n    {\"properties\":{},\"name\":\"Harvested Douglas Fir Tree\",\"tags\":[\"static\"],\"display\":[{\"character\":6,\"color\":37},{\"character\":0,\"color\":1}]},\r\n    {\"properties\":{\"food\":15},\"name\":\"Roasted Potato\",\"tags\":[\"edible\"],\"display\":[{\"character\":7,\"color\":17}]},\r\n    {\"properties\":{\"food\":15},\"name\":\"Roasted Carrot\",\"tags\":[\"edible\"],\"display\":[{\"character\":25,\"color\":17}]},\r\n    {\"properties\":{\"food\":15},\"name\":\"Roasted Onion\",\"tags\":[\"edible\"],\"display\":[{\"character\":162,\"color\":17}]},\r\n    {\"properties\":{\"food\":10},\"name\":\"Roasted Stinging Nettle\",\"tags\":[\"edible\"],\"display\":[{\"character\":235,\"color\":17}]},\r\n    {\"properties\":{},\"name\":\"Bowl of Uncooked Rose Hip Tea\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":63}]},\r\n    {\"properties\":{\"food\":15,\"heal\":20,\"cure\":1,\"leftovers\":73},\"name\":\"Full Bowl of Rose Hip Tea\",\"tags\":[\"edible\",\"healing\"],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":0}]},\r\n    {\"properties\":{},\"name\":\"Bowl with Rye Dough\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":9,\"color\":32}]},\r\n    {\"properties\":{},\"name\":\"Bowl of Uncooked Stinging Nettle Tea\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":37}]},\r\n    {\"properties\":{\"food\":25,\"heal\":10,\"cure\":1,\"leftovers\":73},\"name\":\"Bowl of Stinging Nettle Tea\",\"tags\":[\"edible\",\"healing\"],\"display\":[{\"character\":118,\"color\":22},{\"character\":4,\"color\":34}]},\r\n    {\"properties\":{},\"name\":\"Grave\",\"tags\":[\"static\"],\"display\":[{\"character\":157,\"color\":7}]},\r\n    {\"properties\":{},\"name\":\"Harvested Willow Tree\",\"tags\":[\"static\"],\"display\":[{\"character\":158,\"color\":34},{\"character\":0,\"color\":1}]},\r\n    {\"properties\":{\"food\":5,\"heal\":5},\"name\":\"Willow Bark\",\"tags\":[\"edible\",\"healing\"],\"display\":[{\"character\":126,\"color\":34}]},\r\n    {\"properties\":{},\"name\":\"Rye Flour\",\"tags\":[],\"display\":[{\"character\":174,\"color\":32}]},\r\n    {\"properties\":{},\"name\":\"Adobe\",\"tags\":[],\"display\":[{\"character\":81,\"color\":25}]},\r\n    {\"properties\":{},\"name\":\"Adobe Oven\",\"tags\":[\"important\",\"static\"],\"display\":[{\"character\":117,\"color\":25}]},\r\n    {\"properties\":{},\"name\":\"Adobe Forge\",\"tags\":[\"important\",\"static\"],\"display\":[{\"character\":234,\"color\":25}]},\r\n    {\"properties\":{},\"name\":\"Rye Dough\",\"tags\":[],\"display\":[{\"character\":9,\"color\":32}]},\r\n    {\"properties\":{},\"name\":\"Rye Dough on Flat Rock\",\"tags\":[],\"display\":[{\"character\":95,\"color\":7},{\"character\":9,\"color\":32}]},\r\n    {\"properties\":{},\"name\":\"Rye Bread on Flat Rock\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":233,\"color\":32}]},\r\n    {\"properties\":{\"food\":30},\"name\":\"Rye Bread\",\"tags\":[\"edible\",\"delicious\"],\"display\":[{\"character\":233,\"color\":32}]},\r\n    {\"properties\":{},\"name\":\"Iron Vein\",\"tags\":[\"natural\",\"static\"],\"display\":[{\"character\":94,\"color\":28}]},\r\n    {\"properties\":{\"weight\":10},\"name\":\"Raw Iron Ore\",\"tags\":[\"natural\"],\"display\":[{\"character\":22,\"color\":28}]},\r\n    {\"properties\":{},\"name\":\"Wet Clay Plate\",\"tags\":[],\"display\":[{\"character\":95,\"color\":27}]},\r\n    {\"properties\":{},\"name\":\"Clay Plate\",\"tags\":[],\"display\":[{\"character\":95,\"color\":22}]},\r\n    {\"properties\":{\"heat\":8},\"name\":\"Lit Torch\",\"tags\":[\"heatSource\"],\"display\":[{\"character\":26,\"color\":0},{\"character\":26,\"color\":31}]},\r\n    {\"properties\":{},\"name\":\"Charcoal Piece\",\"tags\":[],\"display\":[{\"character\":96,\"color\":5}]},\r\n    {\"properties\":{\"heat\":12},\"name\":\"Lit Oven\",\"tags\":[\"heatSource\",\"static\"],\"display\":[{\"character\":117,\"color\":0},{\"character\":117,\"color\":31}]},\r\n    {\"properties\":{\"heat\":16},\"name\":\"Lit Forge\",\"tags\":[\"heatSource\",\"static\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":234,\"color\":31}]},\r\n    {\"properties\":{},\"name\":\"Bowl with Iron Ore\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":22,\"color\":28}]},\r\n    {\"properties\":{},\"name\":\"Bowl with Charcoal\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":96,\"color\":5}]},\r\n    {\"properties\":{},\"name\":\"Bowl with Steel Prerequisites\",\"tags\":[],\"display\":[{\"character\":118,\"color\":22},{\"character\":22,\"color\":28},{\"character\":96,\"color\":5}]},\r\n    {\"properties\":{\"heat\":16},\"name\":\"Forge with Warming Iron Ore\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":22,\"color\":28},{\"character\":234,\"color\":31},{\"character\":22,\"color\":28}]},\r\n    {\"properties\":{\"heat\":16},\"name\":\"Forge with Hot Iron Ore\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":22,\"color\":31},{\"character\":234,\"color\":31},{\"character\":22,\"color\":0}]},\r\n    {\"properties\":{},\"name\":\"Wooden Tongs\",\"tags\":[],\"display\":[{\"character\":120,\"color\":20}]},\r\n    {\"properties\":{},\"name\":\"Wooden Tongs with Hot Iron\",\"tags\":[],\"display\":[{\"character\":120,\"color\":20},{\"character\":22,\"color\":0},{\"character\":120,\"color\":20},{\"character\":22,\"color\":31}]},\r\n    {\"properties\":{},\"name\":\"Flat Rock with Hot Iron\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":22,\"color\":0},{\"character\":95,\"color\":7},{\"character\":22,\"color\":31}]},\r\n    {\"properties\":{},\"name\":\"Flat Rock with Hot Iron Ingot\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":169,\"color\":0}]},\r\n    {\"properties\":{},\"name\":\"Flat Rock with Iron Ore\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":22,\"color\":28}]},\r\n    {\"properties\":{},\"name\":\"Flat Rock with Iron Ingot\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":169,\"color\":28}]},\r\n    {\"properties\":{},\"name\":\"Iron Ingot\",\"tags\":[\"resource\",\"important\"],\"display\":[{\"character\":169,\"color\":28}]},\r\n    {\"properties\":{},\"name\":\"Smithing Hammer\",\"tags\":[\"tool\",\"important\"],\"display\":[{\"character\":231,\"color\":28}]},\r\n    {\"properties\":{},\"name\":\"Unforged Steel Crucible\",\"tags\":[],\"display\":[{\"character\":110,\"color\":22},{\"character\":22,\"color\":28},{\"character\":96,\"color\":5}]},\r\n    {\"properties\":{\"heat\":16},\"name\":\"Forge with Warming Steel Crucible\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":110,\"color\":28},{\"character\":234,\"color\":31},{\"character\":110,\"color\":28}]},\r\n    {\"properties\":{\"heat\":16},\"name\":\"Forge with Hot Steel Crucible\",\"tags\":[\"static\",\"heatSource\"],\"display\":[{\"character\":234,\"color\":0},{\"character\":110,\"color\":31},{\"character\":234,\"color\":31},{\"character\":110,\"color\":0}]},\r\n    {\"properties\":{},\"name\":\"Wooden Tongs with Hot Steel Crucible\",\"tags\":[],\"display\":[{\"character\":120,\"color\":20},{\"character\":110,\"color\":0},{\"character\":120,\"color\":20},{\"character\":110,\"color\":31}]},\r\n    {\"properties\":{},\"name\":\"Flat Rock with Hot Steel Crucible\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":110,\"color\":0}]},\r\n    {\"properties\":{},\"name\":\"Flat Rock with Steel Crucible\",\"tags\":[\"static\"],\"display\":[{\"character\":95,\"color\":7},{\"character\":110,\"color\":22}]},\r\n    {\"properties\":{},\"name\":\"Forged Steel Crucible\",\"tags\":[\"static\"],\"display\":[{\"character\":110,\"color\":22}]},\r\n    {\"properties\":{},\"name\":\"Bowl with Steel Ingot\",\"tags\":[\"static\"],\"display\":[{\"character\":118,\"color\":22},{\"character\":254,\"color\":7}]},\r\n    {\"properties\":{\"food\":20000},\"name\":\"Steel Ingot\",\"tags\":[\"edible\"],\"display\":[{\"character\":254,\"color\":7}]},\r\n    \r\n    \r\n]","[\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":29},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":27}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":30},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":29}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":31},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":30}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":32},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":31}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":33},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":32}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":34},\"actor\":{\"type\":\"NewItem\",\"data\":28}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":33}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":25},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":23}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":23},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":21}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":21}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":23},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":36}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":36}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":21},\"actor\":{\"type\":\"NewItem\",\"data\":22}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":20}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":14},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":9}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":9},\"actor\":{\"type\":\"NewItem\",\"data\":15}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":14}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":17},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":16}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":18},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":17}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":37},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":28}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":38},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":44}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":44},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":10}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":39},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":38}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":37}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":49},\"actor\":{\"type\":\"NewItem\",\"data\":48}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":47}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":50},\"actor\":{\"type\":\"NewItem\",\"data\":48}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":49}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":51},\"actor\":{\"type\":\"NewItem\",\"data\":48}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":50}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":52},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":16}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":35}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":35},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":25}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":54},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":17}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":35}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":55},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":54}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":56},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":55}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":64}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":63},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":53}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":64},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":22}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":57},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":59}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":52}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":58},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"time\":86400},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":60},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":58}]},\"time\":86400},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":59},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":56}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":62}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":61},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":63}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":23}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":62},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":61}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":65},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":3}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":15}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":3},\"actor\":{\"type\":\"NewItem\",\"data\":64}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":65}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":66},\"actor\":{\"type\":\"NewItem\",\"data\":45}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":11}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":67},\"actor\":{\"type\":\"NewItem\",\"data\":45}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":66}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":68},\"actor\":{\"type\":\"NewItem\",\"data\":45}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":67}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":45},\"actor\":{\"type\":\"NewItem\",\"data\":45}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":68}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":69},\"actor\":{\"type\":\"NewItem\",\"data\":70}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":19}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":72},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":45}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":73}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":72}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":74}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":1}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":73}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":76},\"actor\":{\"type\":\"NewItem\",\"data\":16}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":4}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":75},\"actor\":{\"type\":\"NewItem\",\"data\":53}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":5}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":77}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":41}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":78}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":42}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":79}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":43}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":80}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":36}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":4},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":76}]},\"time\":14400},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":5},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":75}]},\"time\":14400},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":81},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":74}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":48}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":84},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":74}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":36}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":82}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":81}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":85}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":84}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":20},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":22}]},\"time\":28800},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":57},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":58}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":52}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":87},\"actor\":{\"type\":\"NewItem\",\"data\":88}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":8}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":89},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":69}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":90},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":45}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":70}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":93},\"actor\":{\"type\":\"NewItem\",\"data\":73}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":89}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":74}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":94},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":26}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":93}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":101}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":100}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":99}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":99},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":45}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":26}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":60},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":101}]},\"time\":3600},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":102},\"actor\":{\"type\":\"NewItem\",\"data\":102}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":60}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":91},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":90}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":90}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":92},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":91}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":90}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":103},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":91}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":101}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":104},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":92}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":101}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":91},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":103}]},\"time\":28800},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":92},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":104}]},\"time\":28800},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":57},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":52}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":101}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":95}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":103}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":94}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":26},\"actor\":{\"type\":\"NewItem\",\"data\":96}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":95}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":71},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":70}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":70}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}},\"actor\":{\"type\":\"NewItem\",\"data\":102}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":57}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":22}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":105},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":73}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":98}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":106},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":73}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":102}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":107},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":105}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":102}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":107},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":106}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":98}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":108},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":104}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":98}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":109},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":108}]},\"time\":600},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":110},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":18}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":104},\"actor\":{\"type\":\"NewItem\",\"data\":111}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":109}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":110}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":114},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":112}]},\"time\":3600},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":26},\"actor\":{\"type\":\"NewItem\",\"data\":98}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":114}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":112},\"actor\":{\"type\":\"NewItem\",\"data\":110}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":26}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":111}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":113},\"actor\":{\"type\":\"SameItem\",\"data\":{\"op\":\"\",\"ref\":0}}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":112}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":13}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":115},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":113}]},\"time\":1800},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":26},\"actor\":{\"type\":\"NewItem\",\"data\":116}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":115}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":118},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":107}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":100}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":119},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":104}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":118}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":120},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":119}]},\"time\":600},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":104},\"actor\":{\"type\":\"NewItem\",\"data\":121}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":120}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":110}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":122},\"actor\":{\"type\":\"NewItem\",\"data\":110}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":26}]},\"actor\":{\"conditions\":[{\"type\":\"Is\",\"data\":121}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":123},\"actor\":{\"type\":\"\"}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":122}]},\"time\":1800},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":26},\"actor\":{\"type\":\"NewItem\",\"data\":124}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":123}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":125},\"actor\":{\"type\":\"NewItem\",\"data\":100}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":124}]}},\r\n    {\"results\":[{\"origin\":{\"type\":\"NewItem\",\"data\":73},\"actor\":{\"type\":\"NewItem\",\"data\":126}}],\"origin\":{\"conditions\":[{\"type\":\"Is\",\"data\":125}]}}\r\n]","import { Item, ItemCondition, ItemConditionTypes, ItemConditions, ItemState, REGISTRY, Recipe } from \"./lib\";\r\n\r\nexport const WORLD_SIZE = 40;\r\nexport const CHUNK_SIZE = 10;\r\n\r\ntype PositionedItem = { x: number, y: number, item: ItemState | null };\r\n\r\nexport class Chunk {\r\n    x: number;\r\n    y: number;\r\n    items: Array<ItemState | null>;\r\n\r\n    constructor(x: number, y: number, items: Array<ItemState | null>) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.items = items;\r\n    }\r\n\r\n    get(x: number, y: number) {\r\n        return this.items[y * CHUNK_SIZE + x] || null;\r\n    }\r\n\r\n    set(x: number, y: number, item: ItemState | null) {\r\n        this.items[y * CHUNK_SIZE + x] = item;\r\n    }\r\n\r\n    has(selector: ItemConditions) {\r\n        return this.items.some(item => item != null && ItemConditions.matches(selector, item.item));\r\n    }\r\n\r\n    find(selector: ItemConditions): PositionedItem | null {\r\n        const index = this.items.findIndex(item => item != null && ItemConditions.matches(selector, item.item));\r\n        if (index === -1) {\r\n            return null;\r\n        }\r\n        return { x: this.x * CHUNK_SIZE + index % CHUNK_SIZE, y: this.y + Math.floor(index / CHUNK_SIZE), item: this.items[index] };\r\n    }\r\n    \r\n    get active() {\r\n        return this.items.some(item => item != null && item.item.active);\r\n    }\r\n\r\n    get heatProduced() {\r\n        return this.items.reduce((a, b) => a + (b?.item.properties.heat || 0), 0);\r\n    }\r\n}\r\n\r\nexport class World {\r\n    chunks: Chunk[] = [];\r\n    heat: number[] = [];\r\n\r\n    constructor() {\r\n        for (let y = 0; y < WORLD_SIZE; y += 1) {\r\n            for (let x = 0; x < WORLD_SIZE; x += 1) {\r\n                this.chunks.push(new Chunk(x, y, new Array(CHUNK_SIZE * CHUNK_SIZE).fill(null)));\r\n                this.heat.push(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    update(temp: number) {\r\n        for (let y = 0; y < WORLD_SIZE; y += 1) {\r\n            for (let x = 0; x < WORLD_SIZE; x += 1) {\r\n                const index = y * WORLD_SIZE + x;\r\n                this.heat[index] = mlerp(this.heat[index], temp + this.chunks[index].heatProduced, 0.05);\r\n            }\r\n        }\r\n        // disperse\r\n        for (let y = 0; y < WORLD_SIZE; y += 1) {\r\n            for (let x = 0; x < WORLD_SIZE; x += 1) {\r\n                const index = y * WORLD_SIZE + x;\r\n                const temp = this.heat[index];\r\n\r\n                const left = (x > 0) ? this.heat[index - 1] : temp;\r\n                const right = (x < WORLD_SIZE - 1) ? this.heat[index + 1] : temp;\r\n                const up = (y > 0) ? this.heat[index - WORLD_SIZE] : temp;\r\n                const down = (y < WORLD_SIZE - 1) ? this.heat[index + WORLD_SIZE] : temp;\r\n\r\n                const avg = (left + right + up + down) / 4;\r\n                if (avg > temp) {\r\n                    this.heat[index] = mlerp(temp, avg, 0.2);\r\n                } else {\r\n                    this.heat[index] = mlerp(temp, avg, 0.01);\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    get size() {\r\n        return WORLD_SIZE * CHUNK_SIZE;\r\n    }\r\n\r\n    getChunk(x: number, y: number) {\r\n        return this.chunks[y * WORLD_SIZE + x];\r\n    }\r\n\r\n    active() {\r\n        return this.chunks.filter(chunk => chunk.active).map(chunk => {\r\n            const res: PositionedItem[] = [];\r\n            let index = chunk.items.findIndex(item => item != null && item.item.active);\r\n            while (index !== -1) {\r\n                res.push({ x: chunk.x * CHUNK_SIZE + index % CHUNK_SIZE, y: chunk.y * CHUNK_SIZE + Math.floor(index / CHUNK_SIZE), item: chunk.items[index] });\r\n                index = chunk.items.findIndex((item, i) => i > index && item != null && item.item.active);\r\n            }\r\n            return res;\r\n        }).flat();\r\n    }\r\n\r\n    get(x: number, y: number) {\r\n        return this.getChunk(Math.floor(x / CHUNK_SIZE), Math.floor(y / CHUNK_SIZE))?.get(x % CHUNK_SIZE, y % CHUNK_SIZE) || null;\r\n    }\r\n\r\n    set(x: number, y: number, item: ItemState | null) {\r\n        this.getChunk(Math.floor(x / CHUNK_SIZE), Math.floor(y / CHUNK_SIZE)).set(x % CHUNK_SIZE, y % CHUNK_SIZE, item);\r\n    }\r\n\r\n    localWorld(x: number, y: number, size: number): PositionedItem[] {\r\n        const local: ({x: number, y: number, item: ItemState | null})[] = [];\r\n        for (let dy = -size; dy <= size; dy += 1) {\r\n            for (let dx = -size; dx <= size; dx += 1) {\r\n                const xx = x + dx;\r\n                const yy = y + dy;\r\n                if (xx < 0 || yy < 0 || xx >= this.size || yy >= this.size) {\r\n                    local.push({x: xx, y: yy, item: null});\r\n                } else {\r\n                    local.push({x: xx, y: yy, item: this.get(xx, yy)});\r\n                }\r\n            }\r\n        }\r\n        return local;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function generateName() {\r\n    const vowels = 'eaiou';\r\n    const consonants = 'tnsrhldcymfwgpbvkxjqz';\r\n    const syllables = Math.round(Math.random() * 3 + 1);\r\n    let name = '';\r\n    for (let i = 0; i < syllables; i += 1) {\r\n        name += consonants[Math.floor(Math.random() ** 2 * consonants.length)];\r\n        name += vowels[Math.floor(Math.random() * vowels.length)];\r\n        if (Math.random() < 0.5) {\r\n            name += consonants[Math.floor(Math.random() ** 2 * consonants.length)];\r\n        }\r\n    }\r\n    return name;\r\n}\r\n\r\nexport function generateId() {\r\n    return Math.random().toString(36).substring(2, 9);\r\n}\r\n\r\nexport function hashString(str: string) {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i += 1) {\r\n        hash += str.charCodeAt(i);\r\n        hash += (hash << 10);\r\n        hash ^= (hash >> 6);\r\n        hash += (hash << 3);\r\n    }\r\n    return hash;\r\n}\r\n\r\nexport function mlerp(a: number, b: number, t: number) {\r\n    return a + (b - a) * t;\r\n}\r\n\r\nexport function sigmoid(x: number) {\r\n    return 1 / (1 + Math.exp(-x));\r\n}\r\n\r\nexport function normal(x: number) {\r\n    return Math.exp(-(x ** 2));\r\n}\r\n\r\nenum Needs {\r\n    Health = 'health',\r\n    Hunger = 'hunger',\r\n    Temperature = 'temperature',\r\n    Boredom = 'boredom',\r\n}\r\n\r\nenum Direction {\r\n    Here = 0,\r\n    Up = 1,\r\n    Left = 2,\r\n    Down = 3,\r\n    Right = 4,\r\n}\r\n\r\nenum ActionType {\r\n    Nothing = 'nothing',\r\n    Move = 'move',\r\n    Interact = 'interact',\r\n    Eat = 'eat',\r\n}\r\n\r\ninterface Action {\r\n    type: ActionType;\r\n    data: any;\r\n}\r\n\r\ninterface ActionNothing extends Action {\r\n    type: ActionType.Nothing;\r\n    data: {};\r\n}\r\n\r\ninterface ActionMove extends Action {\r\n    type: ActionType.Move;\r\n    data: {\r\n        direction: Direction;\r\n    };\r\n}\r\n\r\ninterface ActionInteract extends Action {\r\n    type: ActionType.Interact;\r\n    data: {\r\n        direction: Direction;\r\n    };\r\n}\r\n\r\ninterface ActionEat extends Action {\r\n    type: ActionType.Eat;\r\n    data: {};\r\n}\r\n\r\nconst Action = {\r\n    Nothing: (): ActionNothing => ({\r\n        type: ActionType.Nothing,\r\n        data: {},\r\n    }),\r\n    Move: (direction: Direction): ActionMove => ({\r\n        type: ActionType.Move,\r\n        data: { direction },\r\n    }),\r\n    Interact: (direction: Direction): ActionInteract => ({\r\n        type: ActionType.Interact,\r\n        data: { direction },\r\n    }),\r\n    Eat: (): ActionEat => ({\r\n        type: ActionType.Eat,\r\n        data: {},\r\n    }),\r\n};\r\n\r\nenum NounType {\r\n    Person = 'person',\r\n    Place = 'place',\r\n    Thing = 'thing',\r\n}\r\n\r\ninterface Noun {\r\n    type: NounType;\r\n    data: any;\r\n}\r\n\r\ninterface NounPerson extends Noun {\r\n    type: NounType.Person;\r\n    data: {\r\n        id: string;\r\n    };\r\n}\r\n\r\ninterface NounPlace extends Noun {\r\n    type: NounType.Place;\r\n    data: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n}\r\n\r\ninterface NounThing extends Noun {\r\n    type: NounType.Thing;\r\n    data: {\r\n        selector: ItemConditions;\r\n    };\r\n}\r\n\r\nconst Noun = {\r\n    Person: (id: string): NounPerson => ({\r\n        type: NounType.Person,\r\n        data: { id },\r\n    }),\r\n    Place: (x: number, y: number): NounPlace => ({\r\n        type: NounType.Place,\r\n        data: { x, y },\r\n    }),\r\n    Thing: (selector: ItemConditions): NounThing => ({\r\n        type: NounType.Thing,\r\n        data: { selector },\r\n    }),\r\n}\r\n\r\nenum MemoryType {\r\n    Location = 'location',\r\n    PersonKnows = 'personKnows',\r\n    Exists = 'exists',\r\n}\r\n\r\ninterface Memory {\r\n    type: MemoryType;\r\n    data: any;\r\n    time: number;\r\n}\r\n\r\ninterface MemoryLocation extends Memory {\r\n    type: MemoryType.Location;\r\n    data: {\r\n        noun: Noun;\r\n        x: number;\r\n        y: number;\r\n    };\r\n}\r\n\r\ninterface MemoryPersonKnows extends Memory {\r\n    type: MemoryType.PersonKnows;\r\n    data: {\r\n        person: NounPerson;\r\n        memory: Memory;\r\n    };\r\n}\r\n\r\ninterface MemoryExists extends Memory {\r\n    type: MemoryType.Exists;\r\n    data: {\r\n        noun: Noun;\r\n    };\r\n}\r\n\r\nconst Memory = {\r\n    Location: (noun: Noun, x: number, y: number, time: number): MemoryLocation => ({\r\n        type: MemoryType.Location,\r\n        data: { noun, x, y},\r\n        time,\r\n    }),\r\n    PersonKnows: (person: NounPerson, memory: Memory, time: number): MemoryPersonKnows => ({\r\n        type: MemoryType.PersonKnows,\r\n        data: { person, memory },\r\n        time,\r\n    }),\r\n    Exists: (noun: Noun, time: number): MemoryExists => ({\r\n        type: MemoryType.Exists,\r\n        data: { noun },\r\n        time,\r\n    }),\r\n}\r\n\r\nenum ObjectiveType {\r\n    FulfillNeed = 'fulfillNeed',\r\n    Obtain = 'obtain',\r\n    BoredomTask = 'boredomTask',\r\n}\r\n\r\ninterface Objective {\r\n    type: ObjectiveType;\r\n    data: any;\r\n}\r\n\r\ninterface ObjectiveFulfillNeed extends Objective {\r\n    type: ObjectiveType.FulfillNeed;\r\n    data: {\r\n        need: Needs;\r\n    };\r\n}\r\n\r\ninterface ObjectiveObtain extends Objective {\r\n    type: ObjectiveType.Obtain;\r\n    data: {\r\n        noun: NounThing;\r\n        another: boolean;\r\n        children: number[];\r\n    };\r\n}\r\n\r\nenum BoredomTaskType {\r\n    Craft = 'craft',\r\n    Organize = 'organize',\r\n    Farm = 'farm',\r\n    Build = 'build',\r\n}\r\n\r\ninterface ObjectiveBoredomTask extends Objective {\r\n    type: ObjectiveType.BoredomTask;\r\n    data: {\r\n        task: BoredomTaskType;\r\n        expiry: number;\r\n    };\r\n}\r\n\r\nconst Objective = {\r\n    FulfillNeed: (need: Needs): ObjectiveFulfillNeed => ({\r\n        type: ObjectiveType.FulfillNeed,\r\n        data: { need },\r\n    }),\r\n    Obtain: (noun: NounThing, another: boolean = false): ObjectiveObtain => ({\r\n        type: ObjectiveType.Obtain,\r\n        data: { noun, another, children: [] },\r\n    }),\r\n    BoredomTask: (task: BoredomTaskType, expiry: number): ObjectiveBoredomTask => ({\r\n        type: ObjectiveType.BoredomTask,\r\n        data: { task, expiry },\r\n    }),\r\n}\r\n\r\nexport default class Person {\r\n    id: string;\r\n    name: string;\r\n    surname: string;\r\n    born: number;\r\n    x: number;\r\n    y: number;\r\n    gender: number;\r\n\r\n    home: { x: number, y: number } | null = null;\r\n\r\n    health: number = 100;\r\n    hunger: number = 100;\r\n    temperature: number = 0;\r\n    score: number = 0;\r\n\r\n    reputations: { [id: string]: number } = {};\r\n    needs: { [id in Needs]: number } = {\r\n        [Needs.Health]: 0,\r\n        [Needs.Hunger]: 0,\r\n        [Needs.Temperature]: 0,\r\n        [Needs.Boredom]: 0,\r\n    };\r\n\r\n    memory: Memory[] = [];\r\n    objectives: Objective[] = [];\r\n\r\n    long: { [key: string]: any } = {};\r\n    short: { [key: string]: any } = {};\r\n\r\n    common: { [key: number]: number } = {};\r\n\r\n    holding: ItemState | null = null;\r\n\r\n    nextAction: Action | null = null;\r\n    \r\n    constructor(id: string, name: string, surname: string, born: number, x: number, y: number) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.surname = surname;\r\n        this.born = born;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.gender = Math.random();\r\n    }\r\n\r\n    male() {\r\n        return this.gender < 0.5;\r\n    }\r\n\r\n    female() {\r\n        return this.gender > 0.5;\r\n    }\r\n\r\n    get fullName() {\r\n        return `${this.name} ${this.surname}`;\r\n    }\r\n\r\n    get color() {\r\n        return Math.abs(hashString(this.surname)) % 64;\r\n    }\r\n\r\n    get altColor() {\r\n        return Math.abs(hashString(this.name)) % 64;\r\n    }\r\n\r\n    get display() {\r\n        const myDisplay = [{ character: this.male() ? 11 : 12, color: this.color }];\r\n        const holdingDisplay = this.holding?.item.display ?? [];\r\n        return [...myDisplay, ...holdingDisplay];\r\n    }\r\n\r\n    get known() {\r\n        return this.memory.filter(memory => \r\n            memory.type === MemoryType.Location \r\n            && memory.data.noun.type === NounType.Thing)\r\n            .map(memory => REGISTRY.query(memory.data.noun.data.selector))\r\n            .flat()\r\n            .filter((item, index, self) => self.indexOf(item) === index);\r\n    }\r\n\r\n    hungerSeverity() {\r\n        return this.hunger < 20 ? 1 : sigmoid((50 - this.hunger) / 10)\r\n    }\r\n\r\n    update(world: World) {\r\n        \r\n        const temp = world.heat[this.outerIndex()];\r\n        this.temperature = mlerp(this.temperature, temp, 0.02);\r\n\r\n        this.score += (this.temperature / 20) ** 3;\r\n        \r\n        if (this.health < 100) {\r\n            this.score -= ((100 - this.health) / 100) ** 2;\r\n            this.health += sigmoid((this.hunger - 50) / 10) * 0.01;\r\n        }\r\n\r\n        const tempEffect = 1 - sigmoid(this.temperature / 2);\r\n        this.hunger -= 0.03 * (0.1 + tempEffect * 0.9);\r\n        if (this.hunger < 0) {\r\n            this.health -= 1.0 * tempEffect * tempEffect;\r\n            this.hunger = 0;\r\n        }\r\n        if (this.hunger > 100) {\r\n            this.health += (this.hunger - 100);\r\n            this.hunger = 100;\r\n        }\r\n        if (this.health > 100) {\r\n            this.score += (this.health - 100) ** 2;\r\n            this.health = 100;\r\n        }\r\n\r\n        if (this.score < 0) {\r\n            this.score = 0;\r\n        }\r\n    }\r\n\r\n    think(world: World, people: Person[], now: number) {\r\n        // compute needs\r\n        this.needs[Needs.Health] = (80 - Math.min(this.health, 80)) ** 3;\r\n        this.needs[Needs.Hunger] = (90 - Math.min(this.hunger, 90)) ** 2;\r\n        this.needs[Needs.Temperature] = (Math.max((5 - this.temperature) * 10, 0));\r\n        this.needs[Needs.Boredom] = (this.health > 80 && this.hunger > 80) ? 60 : 0;\r\n\r\n        const local = world.localWorld(this.x, this.y, 10);\r\n        const localPeople = people.filter(person => Math.abs(person.x - this.x) < 10 && Math.abs(person.y - this.y) < 10);\r\n        const indices = [\r\n            { x: this.x, y: this.y },\r\n            { x: this.x, y: this.y - 1 },\r\n            { x: this.x - 1, y: this.y },\r\n            { x: this.x, y: this.y + 1 },\r\n            { x: this.x + 1, y: this.y },\r\n        ];\r\n\r\n        // forget memories after a day\r\n        this.memory = this.memory.filter(memory => now - memory.time < 86400);\r\n\r\n        for (const person of localPeople) {\r\n            this.memory = this.memory.filter(\r\n                memory => !(memory.type === MemoryType.Exists \r\n                && memory.data.noun.type === NounType.Person \r\n                && memory.data.noun.data.id === person.id)\r\n            );\r\n            if (person.id !== this.id) {\r\n                this.memory.push(Memory.Exists(Noun.Person(person.id), now));\r\n            }\r\n            this.memory = this.memory.filter(\r\n                memory => !(memory.type === MemoryType.Location \r\n                && memory.data.noun.type === NounType.Person \r\n                && memory.data.noun.data.id === person.id)\r\n            );\r\n            if (person.id !== this.id) {\r\n                this.memory.push(Memory.Location({ type: NounType.Person, data: { id: person.id }} as NounPerson, person.x, person.y, now));\r\n            }\r\n        }\r\n\r\n        // if we find out an item is missing, remove it from memory\r\n        this.memory = this.memory.filter(memory => {\r\n            if (memory.type != MemoryType.Location || memory.data.noun.type != NounType.Thing) {\r\n                return true;\r\n            }\r\n            if (memory.data.x < this.x - 10 || memory.data.x > this.x + 10 || memory.data.y < this.y - 10 || memory.data.y > this.y + 10) {\r\n                return true;\r\n            }\r\n            const item = local.find(({ x, y }) => x === memory.data.x && y === memory.data.y);\r\n            return !(item == null || item.item == null || !ItemConditions.matches(memory.data.noun.data.selector, item.item.item)); // eww\r\n        });\r\n\r\n        // similar but for people\r\n        this.memory = this.memory.filter(memory => {\r\n            if (memory.type != MemoryType.Location || memory.data.noun.type != NounType.Person) {\r\n                return true;\r\n            }\r\n            // if two people move away at the exact time, can unintentionally forget where they are\r\n            if (memory.data.x < this.x - 8 || memory.data.x > this.x + 8 || memory.data.y < this.y - 8 || memory.data.y > this.y + 8) {\r\n                return true;\r\n            }\r\n            const person = localPeople.find(({ x, y }) => x === memory.data.x && y === memory.data.y);\r\n            return !(person == null || person.id === this.id);\r\n        });\r\n\r\n        for (const { x, y, item } of local) {\r\n            if (item != null) {\r\n                if (item.item.root) {\r\n                    this.common[item.id] = (this.common[item.id] ?? 0) + 1;\r\n                }\r\n                if (!this.short['justDropped']) {\r\n                    let i = 0;\r\n                    for (const objective of this.objectives.slice(0, this.objectives.length - 1)) {\r\n                        if (objective.type === ObjectiveType.Obtain && !objective.data.another) {\r\n                            if (ItemConditions.matches(objective.data.noun.data.selector, item.item)) {\r\n                                this.completeAltObjective(i);\r\n                                this.memory.push(Memory.Location(objective.data.noun, x, y, now));\r\n                                break;\r\n                            }\r\n                        }\r\n                        i += 1;\r\n                    }\r\n                }\r\n                if (\r\n                    item.item.tags.includes('important') \r\n                    || item.item.tags.includes('foodSource') \r\n                    || item.item.tags.includes('heatSource')\r\n                    || item.item.tags.includes('healing') \r\n                    || item.item.tags.includes('edible')\r\n                ) {\r\n                    this.memory = this.memory.filter(\r\n                        memory => !(memory.type === MemoryType.Location\r\n                        && memory.data.noun.type === NounType.Thing\r\n                        && memory.data.noun.data.selector.conditions.find(\r\n                            (condition: ItemCondition) => condition.type === ItemConditionTypes.Is \r\n                            && condition.data === item.item.id\r\n                        ))\r\n                    );\r\n                    this.memory.push(Memory.Location(\r\n                        { type: NounType.Thing, data: { selector: { conditions: [{ type: ItemConditionTypes.Is, data: item.item.id }] } } }, \r\n                        x, y, now\r\n                    ));\r\n                    \r\n                }\r\n            }\r\n        }\r\n\r\n        let focus = Needs.Health;\r\n        for (const need of [Needs.Health, Needs.Hunger, Needs.Temperature, Needs.Boredom]) {\r\n            if (this.needs[need] > this.needs[focus]) {\r\n                focus = need;\r\n            }\r\n        }\r\n\r\n        // focus = Needs.Hunger;\r\n\r\n        if (this.objectives.length === 0 || this.objectives[0].type !== ObjectiveType.FulfillNeed || this.objectives[0].data.need !== focus) {\r\n            this.objectives = [];\r\n            this.addObjective(Objective.FulfillNeed(focus));\r\n\r\n        }\r\n\r\n        const rootObjective = this.objectives[0];\r\n\r\n        if (rootObjective.type === ObjectiveType.FulfillNeed) {\r\n            if (rootObjective.data.need === Needs.Hunger) {\r\n                if (Math.random() < 0.002) {\r\n                    this.objectives = [rootObjective];\r\n                    this.short = {};\r\n                }\r\n            }\r\n        }\r\n\r\n        const objective = this.objectives[this.objectives.length - 1];\r\n        this.nextAction = Action.Nothing();\r\n\r\n        if (this.short['goto'] != null) {\r\n            if (this.x === this.short['goto'].x && this.y === this.short['goto'].y) {\r\n                this.short['goto'] = null;\r\n            } else {\r\n                if (this.short['calculated']) {\r\n                    // if (this.short['lastIndex'] === this.index()) {\r\n                    //     this.short['path'] = null;\r\n                    // }\r\n                    // let path: { [key: number]: Direction };\r\n                    // if (!this.short['path']) {\r\n                    //     this.short['path'] = this.computePath(world, this.short['goto'].x, this.short['goto'].y, people.map(({ x, y }) => ({ x, y })).filter(({ x, y }) => x !== this.x || y !== this.y));\r\n                    //     this.nextAction = Action.Move(1 + Math.floor(Math.random() * 4) as Direction);\r\n                    // }\r\n                    // if (!this.short['path']) {\r\n                    //     this.short['goto'] = null;\r\n                    //     this.nextAction = Action.Move(1 + Math.floor(Math.random() * 4) as Direction);\r\n                    // } else if (this.nextAction.type === ActionType.Nothing) {\r\n                    //     path = this.short['path'] as { [key: number]: Direction };\r\n                    //     const next = path[this.index()];\r\n                    //     this.short['lastIndex'] = this.index();\r\n                    //     if (!next) {\r\n                    //         this.short['path'] = null;\r\n                    //         this.nextAction = Action.Move(1 + Math.floor(Math.random() * 4) as Direction);\r\n                    //     } else {\r\n                    //         this.nextAction = Action.Move(next);\r\n                    //     }\r\n                    // }\r\n                } else {\r\n                    const dx = this.short['goto'].x - this.x;\r\n                    const dy = this.short['goto'].y - this.y;\r\n\r\n                    const worldAtGoto = world.get(this.short['goto'].x, this.short['goto'].y);\r\n                    if (worldAtGoto != null && worldAtGoto.item.tags.includes('blocking')) {\r\n                        this.short['goto'] = this.gotoNoBlocking(world, this.short['goto'].x, this.short['goto'].y);\r\n                    }\r\n                    \r\n                    if (Math.abs(dx) > Math.abs(dy)) { // super simple pathfinding\r\n                        if (dx > 0) {\r\n                            this.nextAction = Action.Move(Direction.Right);\r\n                        } else {\r\n                            this.nextAction = Action.Move(Direction.Left);\r\n                        }\r\n                    } else {\r\n                        if (dy > 0) {\r\n                            this.nextAction = Action.Move(Direction.Down);\r\n                        } else {\r\n                            this.nextAction = Action.Move(Direction.Up);\r\n                        }\r\n                    }\r\n                    const next = indices[this.nextAction.data.direction];\r\n                    if ((world.get(next.x, next.y) != null && world.get(next.x, next.y)?.item.tags.includes('blocking')) \r\n                        || people.some(person => person.id != this.id && person.x === next.x && person.y === next.y)) {\r\n                        this.nextAction = this.moveRandomly(world, indices);\r\n                    }\r\n                }\r\n            }\r\n        \r\n            //  _  _ ___ ___ ___  ___ \r\n            // | \\| | __| __|   \\/ __|\r\n            // | .` | _|| _|| |) \\__ \\\r\n            // |_|\\_|___|___|___/|___/\r\n                                   \r\n        } else if (objective.type === ObjectiveType.FulfillNeed) {\r\n\r\n            if (objective.data.need === Needs.Health) {\r\n                if (this.holding != null && this.holding.item.tags.includes('healing')) {\r\n                    this.nextAction = Action.Eat();\r\n                } else if (world.get(this.x, this.y) != null && world.get(this.x, this.y)!.item.tags.includes('healing')) {\r\n                    if (this.holding != null) {\r\n                        this.tryToDrop(world, indices, now);\r\n                    } else {\r\n                        this.nextAction = Action.Interact(Direction.Here);\r\n                    }\r\n                } else {\r\n                    const allHealing = REGISTRY.items.filter(item => item.tags.includes('healing'));\r\n                    this.addObjective(Objective.Obtain(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: allHealing[Math.floor(Math.random() * allHealing.length)].id }] }), false));\r\n                }\r\n\r\n\r\n\r\n            } else if (objective.data.need === Needs.Hunger) {\r\n\r\n                if (this.holding != null && this.holding.item.tags.includes('edible')) {\r\n                    this.nextAction = Action.Eat();\r\n                } else if (world.get(this.x, this.y) != null && world.get(this.x, this.y)!.item.tags.includes('edible')) {\r\n                    if (this.holding != null) {\r\n                        this.tryToDrop(world, indices, now);\r\n                    } else {\r\n                        this.nextAction = Action.Interact(Direction.Here);\r\n                    }\r\n                } else {\r\n                    // priority when NOT SEVERE: make a food source / work towards good food\r\n                    // priority when SEVERE: find food\r\n\r\n                    const nutritionScore = (item: Item) => {\r\n                        const food = item.properties.food;\r\n                        const heal = item.properties.heal || 0;\r\n\r\n                        return (food + Math.log2(heal + 1)) ** 2;\r\n                    }\r\n\r\n                    const foodScore = (item: Item) => {\r\n                        const nutrition = nutritionScore(item);\r\n\r\n                        const depth = item.depth();\r\n                        const knowsLocation = this.memory.some(memory => memory.type === MemoryType.Location \r\n                            && memory.data.noun.type === NounType.Thing \r\n                            && ItemConditions.matches(memory.data.noun.data.selector, item)\r\n                        );\r\n\r\n                        const effort = (Math.log2(depth) * item.required(this.known)) ** (knowsLocation ? 1 : 2) + 1;\r\n\r\n                        return (nutrition / effort) * (0.8 + Math.random() * 0.4);\r\n                    }\r\n\r\n                    const foodSourceScore = (item: Item) => {\r\n                        const foodItMakes = item.usedIn.map(recipe => recipe.notableResulted().map(id => REGISTRY.getItem(id))).flat().filter(item => item.tags.includes('edible'));\r\n                        const score = foodItMakes.map(nutritionScore).reduce((a, b) => a + b, 0);\r\n\r\n                        const depth = 0;\r\n                        const knowsLocation = this.memory.some(memory => memory.type === MemoryType.Location \r\n                            && memory.data.noun.type === NounType.Thing \r\n                            && ItemConditions.matches(memory.data.noun.data.selector, item)\r\n                        );\r\n\r\n                        const effort = (depth + 1) ** (knowsLocation ? 1 : 2);\r\n\r\n                        return (score / effort) * (0.8 + Math.random() * 0.4);\r\n                    }\r\n\r\n                    const allEdible = REGISTRY.items.filter(item => item.tags.includes('edible'));\r\n                    const allFoodSources = REGISTRY.items.filter(item => item.tags.includes('foodSource'));\r\n\r\n                    if (false && Math.random() > this.hungerSeverity()) {\r\n                        // find food source\r\n                        const foodSources = allFoodSources.filter(item => foodSourceScore(item) > 0);\r\n                        const bestFoodSource = foodSources.sort((a, b) => foodSourceScore(b) - foodSourceScore(a))[0];\r\n                        if (bestFoodSource) {\r\n                            this.addObjective(Objective.Obtain(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: bestFoodSource.id }] }), false));\r\n                        }\r\n                    } else {\r\n                        // find food\r\n                        const food = allEdible.filter(item => foodScore(item) > 0);\r\n                        const bestFood = food.sort((a, b) => foodScore(b) - foodScore(a))[0];\r\n\r\n                        console.table(food.map(item => ({ name: item.name, score: foodScore(item), nutrition: nutritionScore(item), effort: (item.depth() * item.required(this.known)) ** (this.memory.some(memory => memory.type === MemoryType.Location \r\n                            && memory.data.noun.type === NounType.Thing \r\n                            && ItemConditions.matches(memory.data.noun.data.selector, item)\r\n                        ) ? 1 : 2) + 1  })));\r\n\r\n                        if (bestFood) {\r\n                            this.addObjective(Objective.Obtain(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: bestFood.id }] }), false));\r\n                        }\r\n                    }\r\n                }\r\n            } else if (objective.data.need === Needs.Temperature || objective.data.need === Needs.Boredom) {\r\n                // fire?\r\n                const fire = REGISTRY.getItem(57);\r\n                const kindling = REGISTRY.getItem(52);\r\n                const fireMemory = this.locationMemory(fire);\r\n\r\n                if (fireMemory) {\r\n                    if (this.temperature < 2) {\r\n                        if (world.chunks[this.outerIndex()].items.some(item => item != null && item.item.id === fire.id)) {\r\n                            // randomly move within chunk\r\n                            const dir = [ Direction.Up, Direction.Left, Direction.Down, Direction.Right ].filter(dir => {\r\n                                const next = indices[dir];\r\n                                const chunkIndex = next.x / CHUNK_SIZE + next.y / CHUNK_SIZE * WORLD_SIZE;\r\n                                return chunkIndex === this.outerIndex();\r\n                            });\r\n                            this.nextAction = Action.Move(dir[Math.floor(Math.random() * dir.length)]);\r\n                        } else {\r\n                            this.nextAction = this.moveRandomly(world, indices);\r\n                            this.short['goto'] = this.gotoNoBlocking(world, fireMemory.data.x, fireMemory.data.y);\r\n                        }\r\n                    } else {\r\n                        if (this.holding && this.holding.item.id === kindling.id) {\r\n                            // put kindling near fire\r\n                            if (world.chunks[this.outerIndex()].items.some(item => item != null && item.item.id === fire.id)) {\r\n                                this.tryToDrop(world, indices, now);\r\n                                this.short['goto'] = this.gotoNoBlocking(world, this.x + Math.floor(Math.random() * 10 - 5), this.y + Math.floor(Math.random() * 10 - 5));\r\n                            } else {\r\n                                this.nextAction = this.moveRandomly(world, indices);\r\n                                this.short['goto'] = this.gotoNoBlocking(world, fireMemory.data.x, fireMemory.data.y);\r\n                            }\r\n                        } else if (world.get(this.x, this.y) != null && world.get(this.x, this.y)!.id === kindling.id) {\r\n                            this.nextAction = Action.Interact(Direction.Here);\r\n                        } else {\r\n                            this.addObjective(Objective.Obtain(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: kindling.id }] }), true));\r\n                            this.short['goto'] = this.gotoNoBlocking(world, this.x + Math.floor(Math.random() * 10 - 5), this.y + Math.floor(Math.random() * 10 - 5));\r\n                        }   \r\n                    }\r\n                } else {\r\n                    this.addObjective(Objective.Obtain(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: fire.id }] }), false));\r\n                }\r\n            } else if (objective.data.need === Needs.Boredom) {\r\n                // const allImportant = REGISTRY.items.filter(item => item.tags.includes('important'));\r\n                \r\n                // const priority = (item: Item) => {\r\n                //     const knowsLocation = this.memory.some(memory => memory.type === MemoryType.Location \r\n                //         && memory.data.noun.type === NounType.Thing \r\n                //         && ItemConditions.matches(memory.data.noun.data.selector, item)\r\n                //     );\r\n                //     if (knowsLocation) {\r\n                //         return 0; // want to craft new items!\r\n                //     }\r\n\r\n                //     const effort = (item.depth() * item.required(this.known)) + 1;\r\n                //     return (0.8 + Math.random() * 0.4) / effort;\r\n                // }\r\n\r\n                // const bestItem = allImportant.sort((a, b) => priority(b) - priority(a))[0];\r\n\r\n                // console.table(allImportant.map(item => ({ name: item.name, priority: priority(item), effort: (item.depth() * item.required(this.known)) + 1 })));\r\n\r\n                // this.addObjective(Objective.Obtain(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: bestItem.id }] }), false));\r\n            }\r\n\r\n        //   ___  ___ _____ _   ___ _  _ \r\n        //  / _ \\| _ )_   _/_\\ |_ _| \\| |\r\n        // | (_) | _ \\ | |/ _ \\ | || .` |\r\n        //  \\___/|___/ |_/_/ \\_\\___|_|\\_|\r\n                                         \r\n        } else if (objective.type === ObjectiveType.Obtain) {\r\n            const item = REGISTRY.getItem(REGISTRY.query(objective.data.noun.data.selector)[0]);\r\n            const memory = this.memory.find(memory => memory.type === MemoryType.Location && memory.data.noun.type === NounType.Thing && ItemConditions.matches(memory.data.noun.data.selector, item));\r\n\r\n            if (!objective.data.another && this.holding != null && ItemConditions.matches(objective.data.noun.data.selector, this.holding.item)) {\r\n                this.nextAction = Action.Nothing();\r\n                this.completeObjective();\r\n            } else if (!this.short['justDropped'] && indices.map(i => world.get(i.x, i.y)).some(other => other != null && other.item.id === item.id)) {\r\n                const dir = indices.findIndex(i => world.get(i.x, i.y) != null && world.get(i.x, i.y)!.item.id === item.id);\r\n                this.memory.push(Memory.Location(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: item.id }] }), \r\n                    indices[dir].x, indices[dir].y, now\r\n                ));\r\n                this.completeObjective();\r\n            } else if (!objective.data.another && !this.short['justDropped'] && memory) {\r\n                this.short['goto'] = this.gotoNoBlocking(world, memory.data.x, memory.data.y);\r\n            } else if (!item.root) {\r\n                const recipes = item.resultedBy;\r\n                const recipe = recipes.find(recipe => recipe.simpleUsed().map(id => REGISTRY.getItem(id)).every(item => \r\n                    (this.holding != null && this.holding.id === item.id) ||\r\n                    this.memory.find(memory => \r\n                        memory.type === MemoryType.Location \r\n                        && memory.data.noun.type === NounType.Thing\r\n                        && ItemConditions.matches(memory.data.noun.data.selector, item)\r\n                )));\r\n                \r\n                if (recipe) {\r\n\r\n                    const shouldBeHolding = recipe.actor;\r\n                    const shouldBeNextTo = recipe.origin;\r\n\r\n                    const holdingTheActor = (!!shouldBeHolding && this.holding != null && ItemConditions.matches(shouldBeHolding, this.holding.item)) || (!shouldBeHolding && !this.holding)\r\n                    const nextToOriginIndex = indices.findIndex(i => world.get(i.x, i.y) != null && ItemConditions.matches(shouldBeNextTo, world.get(i.x, i.y)!.item));\r\n\r\n                    if (!holdingTheActor) {\r\n                        if (this.holding && (!shouldBeHolding || !ItemConditions.matches(shouldBeHolding, this.holding.item))) {\r\n                            this.tryToDrop(world, indices, now);\r\n                        } else if (indices.some(i => world.get(i.x, i.y) != null && ItemConditions.matches(shouldBeHolding!, world.get(i.x, i.y)!.item))) {\r\n                            this.nextAction = Action.Interact(indices.findIndex(i => world.get(i.x, i.y) != null && world.get(i.x, i.y)!.item.id === shouldBeHolding!.conditions[0].data) as Direction);\r\n                        } else {\r\n                            const item = REGISTRY.getItem(recipe.getAnActor());\r\n                            // find memory\r\n                            const memory = this.memory.find(memory => memory.type === MemoryType.Location && memory.data.noun.type === NounType.Thing && ItemConditions.matches(memory.data.noun.data.selector, item));\r\n                            if (memory) {\r\n                                this.short['goto'] = this.gotoNoBlocking(world, memory.data.x, memory.data.y);\r\n                            } else { // this should hopefully never happen\r\n                                this.addObjective(Objective.Obtain(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: item.id }] }), true), objective);\r\n                                this.nextAction = Action.Nothing();\r\n                            }\r\n                        }\r\n                    } else if (nextToOriginIndex === -1) {\r\n                        if (this.holding && (!shouldBeHolding || !ItemConditions.matches(shouldBeHolding, this.holding.item))) {\r\n                            this.tryToDrop(world, indices, now);\r\n                        } else {\r\n                            const item = REGISTRY.getItem(recipe.getAnOrigin());\r\n                            // find memory\r\n                            const memory = this.memory.find(memory => memory.type === MemoryType.Location && memory.data.noun.type === NounType.Thing && ItemConditions.matches(memory.data.noun.data.selector, item));\r\n                            if (memory) {\r\n                                this.short['goto'] = this.gotoNoBlocking(world, memory.data.x, memory.data.y);\r\n                            } else { // this should hopefully never happen\r\n                                this.addObjective(Objective.Obtain(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: item.id }] }), true), objective);\r\n                                this.nextAction = Action.Nothing();\r\n                            }\r\n                        }\r\n                    } else { // able to craft\r\n                        this.nextAction = Action.Interact(nextToOriginIndex as Direction);\r\n                    }\r\n\r\n                } else {\r\n                    const itemEffort = (item: Item) => {\r\n                        if (this.objectives.some(objective => objective.type === ObjectiveType.Obtain && ItemConditions.matches(objective.data.noun.data.selector, item) && !objective.data.another)) {\r\n                            return Infinity;\r\n                        }\r\n                        const craftEffort = (item.depth() || 0) ** 2 + 1;\r\n                        const canFindEasily = this.memory.find(memory => \r\n                            memory.type === MemoryType.Location \r\n                            && memory.data.noun.type === NounType.Thing \r\n                            && ItemConditions.matches(memory.data.noun.data.selector, item)\r\n                        ) || local.find(({ item: i }) => i != null && i.item.id === item.id);\r\n                        const howCommon = item.resources().reduce((a, b) => a + (this.common[b.id] ?? 0), 0);\r\n\r\n                        return (canFindEasily ? (Math.sqrt(craftEffort) / 2) : craftEffort) / Math.log(howCommon + Math.E) * (0.8 + Math.random() * 0.4);\r\n                    }\r\n                    const recipeEffort = (recipe: Recipe) => {\r\n                        if (recipe.actor && recipe.results.some(result => result.actor && result.actor.type === 'SameItem')) {\r\n                            return Infinity;\r\n                        }\r\n                        return itemEffort(REGISTRY.getItem(recipe.getAnOrigin())) * (recipe.actor ? itemEffort(REGISTRY.getItem(recipe.getAnActor())) : 1) * (recipe.time || 1);\r\n                    }\r\n                    const bestRecipe = recipes.sort((a, b) => recipeEffort(a) - recipeEffort(b))[0];\r\n                    \r\n                    const items = bestRecipe.simpleUsed().map(id => REGISTRY.getItem(id));\r\n\r\n                    const seen = new Set<number>();\r\n                    \r\n                    for (const item of items.sort((a, b) => a.active || b.active ? ((a.active === b.active) ? 0 : a.active ? -1 : 1) : a.depth() - b.depth())) {\r\n                        if (seen.has(item.id)) {\r\n                            this.objectives[this.objectives.length - 1].data.another = true;\r\n                        }\r\n                        this.addObjective(Objective.Obtain(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: item.id }] }), false), objective);\r\n                        seen.add(item.id);\r\n                    }\r\n                    this.nextAction = Action.Nothing();\r\n                }\r\n            } else {\r\n                // first see if in vicinity\r\n                const item = this.nearestItem(local, objective.data.noun.data.selector);\r\n                \r\n                if (item != null && item.item != null) {\r\n                    this.short['goto'] = this.gotoNoBlocking(world, item.x, item.y);\r\n                } else if (this.whereIsItem(objective.data.noun.data.selector)) {\r\n                    const location = this.whereIsItem(objective.data.noun.data.selector)!;\r\n                    this.short['goto'] = this.gotoNoBlocking(world, location.x, location.y);\r\n                } else { // otherwise, go somewhere random!\r\n                    this.short['searched'] = [...(this.short['searched'] ?? []), [this.x, this.y]];\r\n                    let x = Math.min(Math.max(this.x + Math.round(Math.random() * 20 - 10), 0), world.size - 1);\r\n                    let y = Math.min(Math.max(this.y + Math.round(Math.random() * 20 - 10), 0), world.size - 1);\r\n                    let limit = 0;\r\n                    while (this.short['searched'].find(([sx, sy]) => sx > x - 10 && sx < x + 10 && sy > y - 10 && sy < y + 10)) {\r\n                        x = Math.min(Math.max(this.x + Math.round(Math.random() * (20 + limit * 4) - (10 + limit * 2)), 0), world.size - 1);\r\n                        y = Math.min(Math.max(this.y + Math.round(Math.random() * (20 + limit * 4) - (10 + limit * 2)), 0), world.size - 1);\r\n                        limit += 1;\r\n                        if (limit > 10) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    this.short['goto'] = this.gotoNoBlocking(world, x, y);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (this.nextAction.type === ActionType.Nothing && Math.random() < 0.5) {\r\n            this.nextAction = this.moveRandomly(world, indices);\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    gotoNoBlocking(world: World, x: number, y: number) {\r\n        console.log('GOTO NOT BLOCKING:', x, y, world.get(x, y), world.get(x,y) && world.get(x, y)!.item.tags.includes('blocking'));\r\n        if (world.get(x, y) != null && world.get(x, y)!.item.tags.includes('blocking')) {\r\n            for (const [xx, yy] of [[x, y + 1], [x, y - 1], [x + 1, y], [x - 1, y]]) {\r\n                if (world.get(xx, yy) == null || !world.get(xx, yy)!.item.tags.includes('blocking')) {\r\n                    return { x: xx, y: yy };\r\n                }\r\n            }\r\n            return { x, y };\r\n        } else {\r\n            return { x, y };\r\n        }\r\n    }\r\n\r\n    moveRandomly(world: World, indices: { x: number, y: number }[]) {\r\n        const dirs = [Direction.Up, Direction.Left, Direction.Down, Direction.Right].filter(dir => {\r\n            const next = indices[dir];\r\n            return world.get(next.x, next.y) == null || !world.get(next.x, next.y)!.item.tags.includes('blocking');\r\n        });\r\n        if (dirs.length > 0) {\r\n            return Action.Move(dirs[Math.floor(Math.random() * dirs.length)] as Direction);\r\n        } else {\r\n            return Action.Move(1 + Math.floor(Math.random() * 4) as Direction);\r\n        }\r\n    }\r\n    \r\n    addItemToMemory(world: World, x: number, y: number, now: number) {\r\n        if (world.get(x, y) != null) {\r\n            this.memory.push(Memory.Location(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: world.get(x, y)!.item.id }] }), x, y, now));\r\n        }\r\n    }\r\n\r\n    tryToDrop(world: World, indices: { x: number, y: number }[], now: number) {\r\n        this.short['justDropped'] = true;\r\n        for (let i = 0; i < indices.length; i += 1) {\r\n            if (world.get(indices[i].x, indices[i].y) == null) {\r\n                this.nextAction = Action.Interact(i as Direction);\r\n                this.memory.push(Memory.Location(Noun.Thing({ conditions: [{ type: ItemConditionTypes.Is, data: this.holding!.item.id }] }), indices[i].x, indices[i].y, now));\r\n                return true;\r\n            }\r\n        }\r\n        this.nextAction = this.moveRandomly(world, indices);\r\n        return false;\r\n    }\r\n\r\n    nearestItem(world: {x: number, y: number, item: ItemState | null}[], selector: ItemConditions) {\r\n        const items = world.filter(({ item }) => item != null && ItemConditions.matches(selector, item.item));\r\n        if (items.length === 0) {\r\n            return null;\r\n        }\r\n        return items.sort((a, b) => {\r\n            const aDist = (a.x - this.x) ** 2 + (a.y - this.y) ** 2;\r\n            const bDist = (b.x - this.x) ** 2 + (b.y - this.y) ** 2;\r\n            return aDist - bDist;\r\n        })[0];\r\n    }\r\n\r\n    nearestItemWithoutNearbyPerson(world: {x: number, y: number, item: ItemState | null}[], selector: ItemConditions, people: Person[]) {\r\n        const items = world.filter(({ item }) => item != null && ItemConditions.matches(selector, item.item));\r\n        if (items.length === 0) {\r\n            return null;\r\n        }\r\n        const peopleDist = items.map(({ x, y }) => people.reduce((a, b) => Math.min(a, (b.x - x) ** 2 + (b.y - y) ** 2), Infinity));\r\n        return items.sort((a, b) => {\r\n            const aDist = ((a.x - this.x) ** 2 + (a.y - this.y) ** 2) / (peopleDist[items.indexOf(a)] + 1);\r\n            const bDist = ((b.x - this.x) ** 2 + (b.y - this.y) ** 2) / (peopleDist[items.indexOf(b)] + 1);\r\n            return aDist - bDist;\r\n        })[0];\r\n\r\n    }\r\n\r\n    completeAltObjective(index: number) {\r\n        const marked = new Set<number>();\r\n        const queue = [index];\r\n        const map = this.objectives.map(obj => obj.type === ObjectiveType.Obtain ? obj.data.noun : null);\r\n\r\n        this.short['goto'] = null;\r\n        this.short['path'] = null;\r\n\r\n        while (queue.length > 0) {\r\n            const current = queue.pop()!;\r\n            marked.add(current);\r\n            if (this.objectives[current].type === ObjectiveType.Obtain) {\r\n                this.objectives[current].data.children.forEach((child: number) => {\r\n                    if (!marked.has(child)) {\r\n                        queue.push(child);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        this.objectives = this.objectives.filter((_, i) => !marked.has(i));\r\n        this.objectives.forEach(objective => {\r\n            if (objective.type === ObjectiveType.Obtain) {\r\n                objective.data.children = objective.data.children.filter((child: number) => !marked.has(child)).map((child: number) => this.objectives.findIndex(obj => obj.data.noun === map[child]));\r\n            }\r\n        });\r\n    }\r\n\r\n    /*\r\n    computePath(world: World, x: number, y: number, obstacles: {x: number, y: number}[] = []): { [key: number]: Direction } | null {\r\n        // A* pathfinding, cannot move through items tagged 'blocking'\r\n        // returns a map of which index we're at and which direction to move from there.\r\n\r\n        const heuristic = (index: number) => {\r\n            const dx = index % WORLD_SIZE - x;\r\n            const dy = Math.floor(index / WORLD_SIZE) - y;\r\n            return Math.sqrt(dx ** 2 + dy ** 2);\r\n        }\r\n\r\n        const obstaclesSet = new Set(obstacles.map(({ x, y }) => y * WORLD_SIZE + x));\r\n\r\n        const start = this.index();\r\n        const end = Math.min(Math.max(y, 0), WORLD_SIZE - 1) * WORLD_SIZE + Math.min(Math.max(x, 0), WORLD_SIZE - 1);\r\n\r\n        if (start === end) {\r\n            return {};\r\n        }\r\n        if (obstaclesSet.has(end)) {\r\n            return null;\r\n        }\r\n\r\n        const open: number[] = [start];\r\n        const closed = new Set<number>();\r\n\r\n        const cost: { [key: number]: number } = {};\r\n        const parent: { [key: number]: number | null } = {};\r\n\r\n        cost[start] = 0;\r\n        parent[start] = null;\r\n\r\n        let i = 0;\r\n        while (open.length > 0) {\r\n            const current = open.reduce((a, b) => cost[a] ?? 0 + heuristic(a) < cost[b] ?? 0 + heuristic(b) ? a : b, open[0]);\r\n            if (current === end) {\r\n                break;\r\n            }\r\n            \r\n            open.splice(open.indexOf(current), 1);\r\n            closed.add(current);\r\n\r\n            const neighbors = [\r\n                current - WORLD_SIZE,\r\n                current - 1,\r\n                current + 1,\r\n                current + WORLD_SIZE,\r\n            ];\r\n\r\n            for (const neighbor of neighbors) {\r\n                const nx = neighbor % WORLD_SIZE;\r\n                const ny = Math.floor(neighbor / WORLD_SIZE);\r\n                if (nx < 0 || ny < 0 || nx >= WORLD_SIZE || ny >= WORLD_SIZE) {\r\n                    continue;\r\n                }\r\n                if (closed.has(neighbor)) {\r\n                    continue;\r\n                }\r\n                if (obstaclesSet.has(neighbor)) {\r\n                    continue;\r\n                }\r\n                if (world[neighbor] != null && world[neighbor]!.item.tags.includes('blocking')) {\r\n                    continue;\r\n                }\r\n                const newCost = cost[current] + 1;\r\n                if (!open.includes(neighbor)) {\r\n                    open.push(neighbor);\r\n                } else if (newCost >= cost[neighbor]) {\r\n                    continue;\r\n                }\r\n                cost[neighbor] = newCost;\r\n                parent[neighbor] = current;\r\n            }\r\n\r\n            i += 1;\r\n            if (i > 10000) {\r\n                console.log('search exceeded 10000 node limit');\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (open.length === 0) {\r\n            console.log('ran out of nodes?', i);\r\n        }\r\n        \r\n        if (parent[end] == null) {\r\n            console.log('no path found', this.x, this.y, x, y);\r\n            return null;\r\n        }\r\n\r\n        const path: { [key: number]: Direction } = {};\r\n        let current = end;\r\n        while (current !== start) {\r\n            const next = parent[current]!;\r\n            if (next === current - WORLD_SIZE) {\r\n                path[next] = Direction.Down;\r\n            } else if (next === current - 1) {\r\n                path[next] = Direction.Right;\r\n            } else if (next === current + 1) {\r\n                path[next] = Direction.Left;\r\n            } else if (next === current + WORLD_SIZE) {\r\n                path[next] = Direction.Up;\r\n            }\r\n            current = next;\r\n        }\r\n        return path;\r\n    } */\r\n\r\n    locationMemory(item: Item) {\r\n        return this.memory.find(memory => memory.type === MemoryType.Location && memory.data.noun.type === NounType.Thing && ItemConditions.matches(memory.data.noun.data.selector, item));\r\n    }\r\n\r\n    whereIsItem(item: ItemConditions) {\r\n        const memory = this.memory.find(memory => \r\n            memory.type === MemoryType.Location \r\n            && memory.data.noun.type === NounType.Thing \r\n            && ItemConditions.matches( \r\n                item,\r\n                REGISTRY.getItem(REGISTRY.query(memory.data.noun.data.selector)[0] || 0)\r\n            ));\r\n        if (memory == null) {\r\n            return null;\r\n        }\r\n        return memory.data;\r\n    }\r\n\r\n    completeObjective() {\r\n        const lastIndex = this.objectives.length - 1;\r\n        this.objectives.forEach(objective => {\r\n            if (objective.type === ObjectiveType.Obtain) {\r\n                objective.data.children = objective.data.children.filter((child: number) => child !== lastIndex);\r\n            }\r\n        });\r\n        this.objectives.pop();\r\n        this.short = {};\r\n    }\r\n\r\n    addObjective(objective: Objective, parent?: Objective) {\r\n        if (parent != null && parent.type === ObjectiveType.Obtain && objective.type === ObjectiveType.Obtain) {\r\n            parent.data.children.push(this.objectives.length);\r\n        }\r\n        this.objectives.push(objective);\r\n        this.short = {};\r\n    }\r\n\r\n    act() {\r\n        if (this.nextAction != null) {\r\n            return this.nextAction;\r\n        } else {\r\n            return Action.Nothing();\r\n        }\r\n    }\r\n\r\n    outerIndex() {\r\n        return Math.floor(this.y / CHUNK_SIZE) * WORLD_SIZE + Math.floor(this.x / CHUNK_SIZE);\r\n    }\r\n\r\n    innerIndex() {\r\n        return (this.y % CHUNK_SIZE) * CHUNK_SIZE + (this.x % CHUNK_SIZE);\r\n    }\r\n    \r\n}\r\n\r\nexport function generateGroup(now: number, world: World) {\r\n    const surname = generateName();\r\n    const size = Math.round(Math.random() * 4 + 2);\r\n    const x = Math.round(Math.random() * world.size);\r\n    const y = Math.round(Math.random() * world.size);\r\n\r\n    const group: Person[] = [];\r\n    const takenPositions: [number, number][] = [];\r\n\r\n    for (let i = 0; i < size; i += 1) {\r\n        const name = generateName();\r\n        let px = x;\r\n        let py = y;\r\n        while (takenPositions.find(([tx, ty]) => tx === px && ty === py) || world.get(px, py) != null) {\r\n            px = Math.min(Math.max(x + Math.round(Math.random() * 20 - 10), 0), world.size - 1);\r\n            py = Math.min(Math.max(y + Math.round(Math.random() * 20 - 10), 0), world.size - 1);\r\n        }\r\n        takenPositions.push([px, py]);\r\n        group.push(new Person(generateId(), name, surname, now, px, py));\r\n    }\r\n    for (const person of group) {\r\n        for (const other of group) {\r\n            if (person === other) {\r\n                continue;\r\n            }\r\n            person.reputations[other.id] = 100;\r\n            person.memory.push(Memory.Exists(Noun.Person(other.id), now));\r\n            person.health = 80 + Math.random() * 20;\r\n            person.home = { x, y };\r\n        }\r\n    }\r\n    return group;\r\n}\r\n\r\nexport function assignReputations(people: Person[]) {\r\n    for (const person of people) {\r\n        for (const other of people) {\r\n            if (person === other) {\r\n                continue;\r\n            }\r\n            if (person.reputations[other.id] === undefined) {\r\n                person.reputations[other.id] = 0;\r\n            }\r\n            if (person.female() != other.female()) { // heterosexual FOR NOW :)\r\n                person.reputations[other.id] += 50;\r\n            }\r\n            person.reputations[other.id] += Math.round(Math.random() * 20 - 10);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","ItemConditionTypes","RecipeResultType","Needs","Direction","ActionType","NounType","MemoryType","ObjectiveType","BoredomTaskType","$53f3621204de4d76$export$1f4e9867ac5b0621","$53f3621204de4d76$var$RecipeResultType","$25435e71e18ef34b$var$Needs","$25435e71e18ef34b$var$Direction","$25435e71e18ef34b$var$ActionType","$25435e71e18ef34b$var$NounType","$25435e71e18ef34b$var$MemoryType","$25435e71e18ef34b$var$ObjectiveType","$25435e71e18ef34b$var$BoredomTaskType","$53f3621204de4d76$exports","$53f3621204de4d76$export$6d08773d2e66f8f2","$53f3621204de4d76$export$21cc2ed387caee94","$53f3621204de4d76$export$7f9b7f9a9512098","$53f3621204de4d76$export$8c94884628249f27","$53f3621204de4d76$export$1015978009c33b96","$53f3621204de4d76$export$e61e05c18d2ee555","$53f3621204de4d76$export$863af0becc8cdadb","$b5a86eb4d6ca5977$exports","JSON","parse","$fab0e267a6bf49b4$exports","_","DEFAULT_ITEM","character","color","constructor","id","name","tags","display","properties","usedIn","uses","map","getRecipe","filter","recipe","i","indexOf","resultedBy","results","active","some","time","root","includes","length","depth","depths","resources","required","has","seen","Set","add","reduce","acc","used","item","getItem","isNeededToMake","getAnOrigin","actor","getAnActor","value","clone","$53f3621204de4d76$var$cmp","inp","op","ref","matches","condition","type","data","property","conditions","every","c","origin","options","originValue","willOccur","now","actorValue","getRandomResult","random","total","chance","r","origins","query","actors","simpleUsed","resulted","result","push","notableResulted","getResult","newItem","getOptionalResult","console","log","getResults","items","Map","recipes","setItems","itemsData","forEach","itemData","setRecipes","recipesData","recipeData","refresh","changed","Math","max","stringify","undefined","itemCount","$25435e71e18ef34b$exports","$25435e71e18ef34b$export$7714bc4c41155738","$25435e71e18ef34b$export$c1abb8bab1e615cd","$25435e71e18ef34b$export$5a0870a55ad02f1a","$25435e71e18ef34b$export$812cd9544993280d","$25435e71e18ef34b$export$89129124b807045f","$25435e71e18ef34b$export$5d832d6580b26c5","$25435e71e18ef34b$export$567fc7097e064344","$25435e71e18ef34b$export$9169be2e06c9c165","$25435e71e18ef34b$export$3b295495ca3cad7c","$25435e71e18ef34b$export$411e9a7b4316b872","$25435e71e18ef34b$export$2e2bcd8739ae039","$25435e71e18ef34b$export$5d84c5ff06f774b1","$25435e71e18ef34b$export$a0ae4e7d1f7ff4b1","x","y","selector","find","index","findIndex","floor","heatProduced","b","heat","chunks","Array","fill","update","temp","left","right","up","down","avg","size","getChunk","chunk","res","flat","localWorld","local","dy","dx","xx","yy","vowels","consonants","syllables","round","toString","substring","str","hash","charCodeAt","t","exp","$25435e71e18ef34b$var$Action","Nothing","Move","direction","Interact","Eat","$25435e71e18ef34b$var$Noun","Person","Place","Thing","$25435e71e18ef34b$var$Memory","Location","noun","PersonKnows","person","memory","Exists","$25435e71e18ef34b$var$Objective","FulfillNeed","need","Obtain","another","children","BoredomTask","task","expiry","surname","born","home","health","hunger","temperature","score","reputations","needs","objectives","long","short","common","holding","nextAction","gender","male","female","fullName","abs","altColor","myDisplay","holdingDisplay","known","self","hungerSeverity","world","outerIndex","tempEffect","think","people","min","localPeople","indices","objective","slice","completeAltObjective","Is","focus","addObjective","rootObjective","worldAtGoto","gotoNoBlocking","next","moveRandomly","tryToDrop","allHealing","nutritionScore","food","heal","log2","foodScore","nutrition","knowsLocation","effort","allEdible","bestFood","sort","table","fire","kindling","fireMemory","locationMemory","dir","chunkIndex","completeObjective","other","nearestItem","whereIsItem","location","limit","sx","sy","shouldBeHolding","shouldBeNextTo","holdingTheActor","nextToOriginIndex","itemEffort","Infinity","craftEffort","canFindEasily","howCommon","sqrt","E","recipeEffort","bestRecipe","dirs","addItemToMemory","aDist","bDist","nearestItemWithoutNearbyPerson","peopleDist","marked","queue","obj","current","pop","child","lastIndex","parent","act","innerIndex","group","takenPositions","px","py","tx","ty","key","hasOwnProperty","window"],"version":3,"file":"index.b8f9d50a.js.map"}